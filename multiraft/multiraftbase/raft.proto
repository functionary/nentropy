/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Use gen.sh to generate .pb.go files.
syntax = "proto3";

package nentropy.multiraftbase;
option go_package = "multiraftbase";

import "github.com/coreos/etcd/raft/raftpb/raft.proto";
import "state.proto";
import "error.proto";
import "metadata.proto";
import "gogoproto/gogo.proto";

message RaftHeartbeat {
    string group_id = 1 [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "GroupID"];
    uint32 from_replica_id = 2 [(gogoproto.customname) = "FromReplicaID", (gogoproto.casttype) = "ReplicaID"];
    uint32 to_replica_id = 3 [(gogoproto.customname) = "ToReplicaID", (gogoproto.casttype) = "ReplicaID"];
    uint64 term = 4;
    uint64 commit = 5;
    bool quiesce = 6;
}

// RaftMessageRequest is the request used to send raft messages using our
// protobuf-based RPC codec. If a RaftMessageRequest has a non-empty number of
// heartbeats or heartbeat_resps, the contents of the message field is treated
// as a dummy message and discarded. A coalesced heartbeat request's replica
// descriptor's range ID must be zero.
message RaftMessageRequest {
    string group_id = 1 [(gogoproto.customname) = "GroupID",
                        (gogoproto.casttype) = "GroupID"];
    ReplicaDescriptor from_replica = 2 [(gogoproto.nullable) = false];
    ReplicaDescriptor to_replica = 3 [(gogoproto.nullable) = false];
    raftpb.Message message = 4 [(gogoproto.nullable) = false];
    // Is this a quiesce request? A quiesce request is a MsgHeartbeat
    // which is requesting the recipient to stop ticking its local
    // replica as long as the current Raft state matches the heartbeat
    // Term/Commit. If the Term/Commit match, the recipient is marked as
    // quiescent. If they don't match, the message is passed along to
    // Raft which will generate a MsgHeartbeatResp that will unquiesce
    // the sender.
    bool quiesce = 5;
    // A coalesced heartbeat request is any RaftMessageRequest with a nonzero number of
    // heartbeats or heartbeat_resps.
    repeated RaftHeartbeat heartbeats = 6 [(gogoproto.nullable) = false];
    repeated RaftHeartbeat heartbeat_resps = 7 [(gogoproto.nullable) = false];
}

message RaftMessageRequestBatch {
    repeated RaftMessageRequest requests = 1;
}

message RaftMessageResponseUnion {
    option (gogoproto.onlyone) = true;

    Error error = 1;
}

message RaftMessageResponse {
    string group_id = 1 [(gogoproto.customname) = "GroupID",
                        (gogoproto.casttype) = "GroupID"];
    ReplicaDescriptor from_replica = 2[(gogoproto.nullable) = false];
    ReplicaDescriptor to_replica = 3[(gogoproto.nullable) = false];
    RaftMessageResponseUnion union = 4[(gogoproto.nullable) = false];
}

// SnapshotRequest is the request used to send streaming snapshot requests.
message SnapshotRequest {
    enum Priority {
        UNKNOWN = 0;
        // RECOVERY is used for a Raft-initiated snapshots and for
        // up-replication snapshots (i.e. when a dead node has been
        // removed and the range needs to be up-replicated).
        RECOVERY = 1;
        // REBALANCE is used for snapshots involved in rebalancing.
        REBALANCE = 2;
    }

    message Header {
        reserved 1;

        // The replica state at the time the snapshot was generated. Note
        // that ReplicaState.Desc differs from the above range_descriptor
        // field which holds the updated descriptor after the new replica
        // has been added while ReplicaState.Desc holds the descriptor
        // before the new replica has been added.
        ReplicaState state = 5;

        // The inner raft message is of type MsgSnap, and its snapshot data contains a UUID.
        RaftMessageRequest raft_message_request = 2;

        // The estimated size of the range, to be used in reservation decisions.
        int64 range_size = 3;

        // can_decline is set on preemptive snapshots, but not those generated
        // by raft because at that point it is better to queue up the stream
        // than to cancel it.
        bool can_decline = 4;

        // The priority of the snapshot.
        Priority priority = 6;
    }

    Header header = 1;

    // A RocksDB BatchRepr. Multiple kv_batches may be sent across multiple request messages.
    bytes kv_batch = 2;

    // These are really raftpb.Entry, but we model them as raw bytes to avoid
    // roundtripping through memory. They are separate from the kv_batch to
    // allow flexibility in log implementations.
    repeated bytes log_entries = 3;

    bool final = 4;
}

message SnapshotResponse {
    enum Status {
        UNKNOWN = 0;
        ACCEPTED = 1;
        APPLIED = 2;
        ERROR = 3;
        DECLINED = 4;
    }
    Status status = 1;
    string message = 2;
    reserved 3;
}

// ConfChangeContext is encoded in the raftpb.ConfChange.Context field.
message ConfChangeContext {
    string command_id = 1[(gogoproto.customname) = "CommandID"];

    // Payload is the application-level command (i.e. an encoded
    // storagebase.RaftCommand).
    bytes payload = 2;

    // Replica contains full details about the replica being added or removed.
    ReplicaDescriptor replica = 3[(gogoproto.nullable) = false];
}

service MultiRaft {
    rpc RaftMessageBatch (stream RaftMessageRequestBatch) returns (stream RaftMessageResponse) {}
    rpc RaftSnapshot (stream SnapshotRequest) returns (stream SnapshotResponse) {}
}