// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft.proto

package multiraftbase

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import raftpb "github.com/coreos/etcd/raft/raftpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SnapshotRequest_Priority int32

const (
	SnapshotRequest_UNKNOWN SnapshotRequest_Priority = 0
	// RECOVERY is used for a Raft-initiated snapshots and for
	// up-replication snapshots (i.e. when a dead node has been
	// removed and the range needs to be up-replicated).
	SnapshotRequest_RECOVERY SnapshotRequest_Priority = 1
	// REBALANCE is used for snapshots involved in rebalancing.
	SnapshotRequest_REBALANCE SnapshotRequest_Priority = 2
)

var SnapshotRequest_Priority_name = map[int32]string{
	0: "UNKNOWN",
	1: "RECOVERY",
	2: "REBALANCE",
}
var SnapshotRequest_Priority_value = map[string]int32{
	"UNKNOWN":   0,
	"RECOVERY":  1,
	"REBALANCE": 2,
}

func (x SnapshotRequest_Priority) String() string {
	return proto.EnumName(SnapshotRequest_Priority_name, int32(x))
}
func (SnapshotRequest_Priority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRaft, []int{5, 0}
}

type SnapshotResponse_Status int32

const (
	SnapshotResponse_UNKNOWN  SnapshotResponse_Status = 0
	SnapshotResponse_ACCEPTED SnapshotResponse_Status = 1
	SnapshotResponse_APPLIED  SnapshotResponse_Status = 2
	SnapshotResponse_ERROR    SnapshotResponse_Status = 3
	SnapshotResponse_DECLINED SnapshotResponse_Status = 4
)

var SnapshotResponse_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACCEPTED",
	2: "APPLIED",
	3: "ERROR",
	4: "DECLINED",
}
var SnapshotResponse_Status_value = map[string]int32{
	"UNKNOWN":  0,
	"ACCEPTED": 1,
	"APPLIED":  2,
	"ERROR":    3,
	"DECLINED": 4,
}

func (x SnapshotResponse_Status) String() string {
	return proto.EnumName(SnapshotResponse_Status_name, int32(x))
}
func (SnapshotResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRaft, []int{6, 0}
}

type RaftHeartbeat struct {
	GroupID       GroupID   `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3,casttype=GroupID" json:"group_id,omitempty"`
	FromReplicaID ReplicaID `protobuf:"varint,2,opt,name=from_replica_id,json=fromReplicaId,proto3,casttype=ReplicaID" json:"from_replica_id,omitempty"`
	ToReplicaID   ReplicaID `protobuf:"varint,3,opt,name=to_replica_id,json=toReplicaId,proto3,casttype=ReplicaID" json:"to_replica_id,omitempty"`
	Term          uint64    `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Commit        uint64    `protobuf:"varint,5,opt,name=commit,proto3" json:"commit,omitempty"`
	Quiesce       bool      `protobuf:"varint,6,opt,name=quiesce,proto3" json:"quiesce,omitempty"`
}

func (m *RaftHeartbeat) Reset()                    { *m = RaftHeartbeat{} }
func (m *RaftHeartbeat) String() string            { return proto.CompactTextString(m) }
func (*RaftHeartbeat) ProtoMessage()               {}
func (*RaftHeartbeat) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{0} }

func (m *RaftHeartbeat) GetGroupID() GroupID {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *RaftHeartbeat) GetFromReplicaID() ReplicaID {
	if m != nil {
		return m.FromReplicaID
	}
	return 0
}

func (m *RaftHeartbeat) GetToReplicaID() ReplicaID {
	if m != nil {
		return m.ToReplicaID
	}
	return 0
}

func (m *RaftHeartbeat) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RaftHeartbeat) GetCommit() uint64 {
	if m != nil {
		return m.Commit
	}
	return 0
}

func (m *RaftHeartbeat) GetQuiesce() bool {
	if m != nil {
		return m.Quiesce
	}
	return false
}

// RaftMessageRequest is the request used to send raft messages using our
// protobuf-based RPC codec. If a RaftMessageRequest has a non-empty number of
// heartbeats or heartbeat_resps, the contents of the message field is treated
// as a dummy message and discarded. A coalesced heartbeat request's replica
// descriptor's range ID must be zero.
type RaftMessageRequest struct {
	GroupID     GroupID           `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3,casttype=GroupID" json:"group_id,omitempty"`
	FromReplica ReplicaDescriptor `protobuf:"bytes,2,opt,name=from_replica,json=fromReplica" json:"from_replica"`
	ToReplica   ReplicaDescriptor `protobuf:"bytes,3,opt,name=to_replica,json=toReplica" json:"to_replica"`
	Message     raftpb.Message    `protobuf:"bytes,4,opt,name=message" json:"message"`
	// Is this a quiesce request? A quiesce request is a MsgHeartbeat
	// which is requesting the recipient to stop ticking its local
	// replica as long as the current Raft state matches the heartbeat
	// Term/Commit. If the Term/Commit match, the recipient is marked as
	// quiescent. If they don't match, the message is passed along to
	// Raft which will generate a MsgHeartbeatResp that will unquiesce
	// the sender.
	Quiesce bool `protobuf:"varint,5,opt,name=quiesce,proto3" json:"quiesce,omitempty"`
	// A coalesced heartbeat request is any RaftMessageRequest with a nonzero number of
	// heartbeats or heartbeat_resps.
	Heartbeats     []RaftHeartbeat `protobuf:"bytes,6,rep,name=heartbeats" json:"heartbeats"`
	HeartbeatResps []RaftHeartbeat `protobuf:"bytes,7,rep,name=heartbeat_resps,json=heartbeatResps" json:"heartbeat_resps"`
}

func (m *RaftMessageRequest) Reset()                    { *m = RaftMessageRequest{} }
func (m *RaftMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*RaftMessageRequest) ProtoMessage()               {}
func (*RaftMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{1} }

func (m *RaftMessageRequest) GetGroupID() GroupID {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *RaftMessageRequest) GetFromReplica() ReplicaDescriptor {
	if m != nil {
		return m.FromReplica
	}
	return ReplicaDescriptor{}
}

func (m *RaftMessageRequest) GetToReplica() ReplicaDescriptor {
	if m != nil {
		return m.ToReplica
	}
	return ReplicaDescriptor{}
}

func (m *RaftMessageRequest) GetMessage() raftpb.Message {
	if m != nil {
		return m.Message
	}
	return raftpb.Message{}
}

func (m *RaftMessageRequest) GetQuiesce() bool {
	if m != nil {
		return m.Quiesce
	}
	return false
}

func (m *RaftMessageRequest) GetHeartbeats() []RaftHeartbeat {
	if m != nil {
		return m.Heartbeats
	}
	return nil
}

func (m *RaftMessageRequest) GetHeartbeatResps() []RaftHeartbeat {
	if m != nil {
		return m.HeartbeatResps
	}
	return nil
}

type RaftMessageRequestBatch struct {
	Requests []RaftMessageRequest `protobuf:"bytes,1,rep,name=requests" json:"requests"`
}

func (m *RaftMessageRequestBatch) Reset()                    { *m = RaftMessageRequestBatch{} }
func (m *RaftMessageRequestBatch) String() string            { return proto.CompactTextString(m) }
func (*RaftMessageRequestBatch) ProtoMessage()               {}
func (*RaftMessageRequestBatch) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{2} }

func (m *RaftMessageRequestBatch) GetRequests() []RaftMessageRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type RaftMessageResponseUnion struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *RaftMessageResponseUnion) Reset()                    { *m = RaftMessageResponseUnion{} }
func (m *RaftMessageResponseUnion) String() string            { return proto.CompactTextString(m) }
func (*RaftMessageResponseUnion) ProtoMessage()               {}
func (*RaftMessageResponseUnion) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{3} }

func (m *RaftMessageResponseUnion) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type RaftMessageResponse struct {
	GroupID     GroupID                  `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3,casttype=GroupID" json:"group_id,omitempty"`
	FromReplica ReplicaDescriptor        `protobuf:"bytes,2,opt,name=from_replica,json=fromReplica" json:"from_replica"`
	ToReplica   ReplicaDescriptor        `protobuf:"bytes,3,opt,name=to_replica,json=toReplica" json:"to_replica"`
	Union       RaftMessageResponseUnion `protobuf:"bytes,4,opt,name=union" json:"union"`
}

func (m *RaftMessageResponse) Reset()                    { *m = RaftMessageResponse{} }
func (m *RaftMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftMessageResponse) ProtoMessage()               {}
func (*RaftMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{4} }

func (m *RaftMessageResponse) GetGroupID() GroupID {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *RaftMessageResponse) GetFromReplica() ReplicaDescriptor {
	if m != nil {
		return m.FromReplica
	}
	return ReplicaDescriptor{}
}

func (m *RaftMessageResponse) GetToReplica() ReplicaDescriptor {
	if m != nil {
		return m.ToReplica
	}
	return ReplicaDescriptor{}
}

func (m *RaftMessageResponse) GetUnion() RaftMessageResponseUnion {
	if m != nil {
		return m.Union
	}
	return RaftMessageResponseUnion{}
}

// SnapshotRequest is the request used to send streaming snapshot requests.
type SnapshotRequest struct {
	Header *SnapshotRequest_Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// A RocksDB BatchRepr. Multiple kv_batches may be sent across multiple request messages.
	KvBatch []byte `protobuf:"bytes,2,opt,name=kv_batch,json=kvBatch,proto3" json:"kv_batch,omitempty"`
	// These are really raftpb.Entry, but we model them as raw bytes to avoid
	// roundtripping through memory. They are separate from the kv_batch to
	// allow flexibility in log implementations.
	LogEntries [][]byte `protobuf:"bytes,3,rep,name=log_entries,json=logEntries" json:"log_entries,omitempty"`
	Final      bool     `protobuf:"varint,4,opt,name=final,proto3" json:"final,omitempty"`
}

func (m *SnapshotRequest) Reset()                    { *m = SnapshotRequest{} }
func (m *SnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRequest) ProtoMessage()               {}
func (*SnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{5} }

func (m *SnapshotRequest) GetHeader() *SnapshotRequest_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SnapshotRequest) GetKvBatch() []byte {
	if m != nil {
		return m.KvBatch
	}
	return nil
}

func (m *SnapshotRequest) GetLogEntries() [][]byte {
	if m != nil {
		return m.LogEntries
	}
	return nil
}

func (m *SnapshotRequest) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

type SnapshotRequest_Header struct {
	// The replica state at the time the snapshot was generated. Note
	// that ReplicaState.Desc differs from the above range_descriptor
	// field which holds the updated descriptor after the new replica
	// has been added while ReplicaState.Desc holds the descriptor
	// before the new replica has been added.
	State *ReplicaState `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	// The inner raft message is of type MsgSnap, and its snapshot data contains a UUID.
	RaftMessageRequest *RaftMessageRequest `protobuf:"bytes,2,opt,name=raft_message_request,json=raftMessageRequest" json:"raft_message_request,omitempty"`
	// The estimated size of the range, to be used in reservation decisions.
	RangeSize int64 `protobuf:"varint,3,opt,name=range_size,json=rangeSize,proto3" json:"range_size,omitempty"`
	// can_decline is set on preemptive snapshots, but not those generated
	// by raft because at that point it is better to queue up the stream
	// than to cancel it.
	CanDecline bool `protobuf:"varint,4,opt,name=can_decline,json=canDecline,proto3" json:"can_decline,omitempty"`
	// The priority of the snapshot.
	Priority SnapshotRequest_Priority `protobuf:"varint,6,opt,name=priority,proto3,enum=multiraftbase.SnapshotRequest_Priority" json:"priority,omitempty"`
}

func (m *SnapshotRequest_Header) Reset()                    { *m = SnapshotRequest_Header{} }
func (m *SnapshotRequest_Header) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRequest_Header) ProtoMessage()               {}
func (*SnapshotRequest_Header) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{5, 0} }

func (m *SnapshotRequest_Header) GetState() *ReplicaState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SnapshotRequest_Header) GetRaftMessageRequest() *RaftMessageRequest {
	if m != nil {
		return m.RaftMessageRequest
	}
	return nil
}

func (m *SnapshotRequest_Header) GetRangeSize() int64 {
	if m != nil {
		return m.RangeSize
	}
	return 0
}

func (m *SnapshotRequest_Header) GetCanDecline() bool {
	if m != nil {
		return m.CanDecline
	}
	return false
}

func (m *SnapshotRequest_Header) GetPriority() SnapshotRequest_Priority {
	if m != nil {
		return m.Priority
	}
	return SnapshotRequest_UNKNOWN
}

type SnapshotResponse struct {
	Status  SnapshotResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=multiraftbase.SnapshotResponse_Status" json:"status,omitempty"`
	Message string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SnapshotResponse) Reset()                    { *m = SnapshotResponse{} }
func (m *SnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshotResponse) ProtoMessage()               {}
func (*SnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{6} }

func (m *SnapshotResponse) GetStatus() SnapshotResponse_Status {
	if m != nil {
		return m.Status
	}
	return SnapshotResponse_UNKNOWN
}

func (m *SnapshotResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// ConfChangeContext is encoded in the raftpb.ConfChange.Context field.
type ConfChangeContext struct {
	CommandID string `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// Payload is the application-level command (i.e. an encoded
	// storagebase.RaftCommand).
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Replica contains full details about the replica being added or removed.
	Replica ReplicaDescriptor `protobuf:"bytes,3,opt,name=replica" json:"replica"`
}

func (m *ConfChangeContext) Reset()                    { *m = ConfChangeContext{} }
func (m *ConfChangeContext) String() string            { return proto.CompactTextString(m) }
func (*ConfChangeContext) ProtoMessage()               {}
func (*ConfChangeContext) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{7} }

func (m *ConfChangeContext) GetCommandID() string {
	if m != nil {
		return m.CommandID
	}
	return ""
}

func (m *ConfChangeContext) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ConfChangeContext) GetReplica() ReplicaDescriptor {
	if m != nil {
		return m.Replica
	}
	return ReplicaDescriptor{}
}

func init() {
	proto.RegisterType((*RaftHeartbeat)(nil), "multiraftbase.RaftHeartbeat")
	proto.RegisterType((*RaftMessageRequest)(nil), "multiraftbase.RaftMessageRequest")
	proto.RegisterType((*RaftMessageRequestBatch)(nil), "multiraftbase.RaftMessageRequestBatch")
	proto.RegisterType((*RaftMessageResponseUnion)(nil), "multiraftbase.RaftMessageResponseUnion")
	proto.RegisterType((*RaftMessageResponse)(nil), "multiraftbase.RaftMessageResponse")
	proto.RegisterType((*SnapshotRequest)(nil), "multiraftbase.SnapshotRequest")
	proto.RegisterType((*SnapshotRequest_Header)(nil), "multiraftbase.SnapshotRequest.Header")
	proto.RegisterType((*SnapshotResponse)(nil), "multiraftbase.SnapshotResponse")
	proto.RegisterType((*ConfChangeContext)(nil), "multiraftbase.ConfChangeContext")
	proto.RegisterEnum("multiraftbase.SnapshotRequest_Priority", SnapshotRequest_Priority_name, SnapshotRequest_Priority_value)
	proto.RegisterEnum("multiraftbase.SnapshotResponse_Status", SnapshotResponse_Status_name, SnapshotResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MultiRaft service

type MultiRaftClient interface {
	RaftMessageBatch(ctx context.Context, opts ...grpc.CallOption) (MultiRaft_RaftMessageBatchClient, error)
}

type multiRaftClient struct {
	cc *grpc.ClientConn
}

func NewMultiRaftClient(cc *grpc.ClientConn) MultiRaftClient {
	return &multiRaftClient{cc}
}

func (c *multiRaftClient) RaftMessageBatch(ctx context.Context, opts ...grpc.CallOption) (MultiRaft_RaftMessageBatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MultiRaft_serviceDesc.Streams[0], c.cc, "/multiraftbase.MultiRaft/RaftMessageBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiRaftRaftMessageBatchClient{stream}
	return x, nil
}

type MultiRaft_RaftMessageBatchClient interface {
	Send(*RaftMessageRequestBatch) error
	Recv() (*RaftMessageResponse, error)
	grpc.ClientStream
}

type multiRaftRaftMessageBatchClient struct {
	grpc.ClientStream
}

func (x *multiRaftRaftMessageBatchClient) Send(m *RaftMessageRequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multiRaftRaftMessageBatchClient) Recv() (*RaftMessageResponse, error) {
	m := new(RaftMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MultiRaft service

type MultiRaftServer interface {
	RaftMessageBatch(MultiRaft_RaftMessageBatchServer) error
}

func RegisterMultiRaftServer(s *grpc.Server, srv MultiRaftServer) {
	s.RegisterService(&_MultiRaft_serviceDesc, srv)
}

func _MultiRaft_RaftMessageBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultiRaftServer).RaftMessageBatch(&multiRaftRaftMessageBatchServer{stream})
}

type MultiRaft_RaftMessageBatchServer interface {
	Send(*RaftMessageResponse) error
	Recv() (*RaftMessageRequestBatch, error)
	grpc.ServerStream
}

type multiRaftRaftMessageBatchServer struct {
	grpc.ServerStream
}

func (x *multiRaftRaftMessageBatchServer) Send(m *RaftMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multiRaftRaftMessageBatchServer) Recv() (*RaftMessageRequestBatch, error) {
	m := new(RaftMessageRequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MultiRaft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "multiraftbase.MultiRaft",
	HandlerType: (*MultiRaftServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RaftMessageBatch",
			Handler:       _MultiRaft_RaftMessageBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "raft.proto",
}

func (m *RaftHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	if m.FromReplicaID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.FromReplicaID))
	}
	if m.ToReplicaID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.ToReplicaID))
	}
	if m.Term != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Term))
	}
	if m.Commit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Commit))
	}
	if m.Quiesce {
		dAtA[i] = 0x30
		i++
		if m.Quiesce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RaftMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRaft(dAtA, i, uint64(m.FromReplica.Size()))
	n1, err := m.FromReplica.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRaft(dAtA, i, uint64(m.ToReplica.Size()))
	n2, err := m.ToReplica.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintRaft(dAtA, i, uint64(m.Message.Size()))
	n3, err := m.Message.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Quiesce {
		dAtA[i] = 0x28
		i++
		if m.Quiesce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Heartbeats) > 0 {
		for _, msg := range m.Heartbeats {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRaft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.HeartbeatResps) > 0 {
		for _, msg := range m.HeartbeatResps {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRaft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RaftMessageRequestBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessageRequestBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRaft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RaftMessageResponseUnion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessageResponseUnion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Error.Size()))
		n4, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *RaftMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRaft(dAtA, i, uint64(m.FromReplica.Size()))
	n5, err := m.FromReplica.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRaft(dAtA, i, uint64(m.ToReplica.Size()))
	n6, err := m.ToReplica.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintRaft(dAtA, i, uint64(m.Union.Size()))
	n7, err := m.Union.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *SnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Header.Size()))
		n8, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.KvBatch) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.KvBatch)))
		i += copy(dAtA[i:], m.KvBatch)
	}
	if len(m.LogEntries) > 0 {
		for _, b := range m.LogEntries {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRaft(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Final {
		dAtA[i] = 0x20
		i++
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SnapshotRequest_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRequest_Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RaftMessageRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.RaftMessageRequest.Size()))
		n9, err := m.RaftMessageRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.RangeSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.RangeSize))
	}
	if m.CanDecline {
		dAtA[i] = 0x20
		i++
		if m.CanDecline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.State != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.State.Size()))
		n10, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Priority != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Priority))
	}
	return i, nil
}

func (m *SnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ConfChangeContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfChangeContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommandID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.CommandID)))
		i += copy(dAtA[i:], m.CommandID)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRaft(dAtA, i, uint64(m.Replica.Size()))
	n11, err := m.Replica.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func encodeFixed64Raft(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Raft(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRaft(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RaftHeartbeat) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.FromReplicaID != 0 {
		n += 1 + sovRaft(uint64(m.FromReplicaID))
	}
	if m.ToReplicaID != 0 {
		n += 1 + sovRaft(uint64(m.ToReplicaID))
	}
	if m.Term != 0 {
		n += 1 + sovRaft(uint64(m.Term))
	}
	if m.Commit != 0 {
		n += 1 + sovRaft(uint64(m.Commit))
	}
	if m.Quiesce {
		n += 2
	}
	return n
}

func (m *RaftMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	l = m.FromReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.ToReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.Message.Size()
	n += 1 + l + sovRaft(uint64(l))
	if m.Quiesce {
		n += 2
	}
	if len(m.Heartbeats) > 0 {
		for _, e := range m.Heartbeats {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	if len(m.HeartbeatResps) > 0 {
		for _, e := range m.HeartbeatResps {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	return n
}

func (m *RaftMessageRequestBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	return n
}

func (m *RaftMessageResponseUnion) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func (m *RaftMessageResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	l = m.FromReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.ToReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.Union.Size()
	n += 1 + l + sovRaft(uint64(l))
	return n
}

func (m *SnapshotRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	l = len(m.KvBatch)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if len(m.LogEntries) > 0 {
		for _, b := range m.LogEntries {
			l = len(b)
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	if m.Final {
		n += 2
	}
	return n
}

func (m *SnapshotRequest_Header) Size() (n int) {
	var l int
	_ = l
	if m.RaftMessageRequest != nil {
		l = m.RaftMessageRequest.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.RangeSize != 0 {
		n += 1 + sovRaft(uint64(m.RangeSize))
	}
	if m.CanDecline {
		n += 2
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovRaft(uint64(m.Priority))
	}
	return n
}

func (m *SnapshotResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovRaft(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func (m *ConfChangeContext) Size() (n int) {
	var l int
	_ = l
	l = len(m.CommandID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	l = m.Replica.Size()
	n += 1 + l + sovRaft(uint64(l))
	return n
}

func sovRaft(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaft(x uint64) (n int) {
	return sovRaft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RaftMessageResponseUnion) GetValue() interface{} {
	if this.Error != nil {
		return this.Error
	}
	return nil
}

func (this *RaftMessageResponseUnion) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *Error:
		this.Error = vt
	default:
		return false
	}
	return true
}
func (m *RaftHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = GroupID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromReplicaID", wireType)
			}
			m.FromReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromReplicaID |= (ReplicaID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToReplicaID", wireType)
			}
			m.ToReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToReplicaID |= (ReplicaID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quiesce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quiesce = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = GroupID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quiesce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quiesce = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heartbeats = append(m.Heartbeats, RaftHeartbeat{})
			if err := m.Heartbeats[len(m.Heartbeats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatResps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeartbeatResps = append(m.HeartbeatResps, RaftHeartbeat{})
			if err := m.HeartbeatResps[len(m.HeartbeatResps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftMessageRequestBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessageRequestBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessageRequestBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, RaftMessageRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftMessageResponseUnion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessageResponseUnion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessageResponseUnion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = GroupID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Union", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Union.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &SnapshotRequest_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvBatch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KvBatch = append(m.KvBatch[:0], dAtA[iNdEx:postIndex]...)
			if m.KvBatch == nil {
				m.KvBatch = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogEntries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogEntries = append(m.LogEntries, make([]byte, postIndex-iNdEx))
			copy(m.LogEntries[len(m.LogEntries)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRequest_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftMessageRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaftMessageRequest == nil {
				m.RaftMessageRequest = &RaftMessageRequest{}
			}
			if err := m.RaftMessageRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeSize", wireType)
			}
			m.RangeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanDecline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanDecline = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ReplicaState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (SnapshotRequest_Priority(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (SnapshotResponse_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfChangeContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfChangeContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfChangeContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Replica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaft
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaft
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaft(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaft = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raft.proto", fileDescriptorRaft) }

var fileDescriptorRaft = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xfa, 0xff, 0xbe, 0x8d, 0x93, 0x65, 0x88, 0xca, 0x12, 0x4a, 0x6c, 0x56, 0xa2, 0x58,
	0x08, 0x6c, 0x6a, 0x38, 0x21, 0x81, 0x1a, 0xaf, 0xb7, 0xd4, 0x6d, 0x9a, 0x44, 0x93, 0x16, 0x04,
	0x07, 0xac, 0xf1, 0xee, 0xd8, 0x5e, 0xd5, 0xde, 0xd9, 0xcc, 0x8e, 0x2b, 0xda, 0x8f, 0xc1, 0x09,
	0x09, 0x21, 0xf8, 0x12, 0x1c, 0xb9, 0xe7, 0xc8, 0x27, 0x88, 0x90, 0xf9, 0x0e, 0x1c, 0x38, 0xa1,
	0x99, 0xdd, 0xb5, 0x1d, 0x27, 0x25, 0x55, 0x8f, 0xbd, 0x58, 0xf3, 0xde, 0xfc, 0x7e, 0x6f, 0xde,
	0xfe, 0xde, 0x7b, 0x33, 0x06, 0xe0, 0x64, 0x28, 0x9a, 0x11, 0x67, 0x82, 0xa1, 0xea, 0x74, 0x36,
	0x11, 0x81, 0x74, 0x0c, 0x48, 0x4c, 0x77, 0x3f, 0x1e, 0x05, 0x62, 0x3c, 0x1b, 0x34, 0x3d, 0x36,
	0x6d, 0x79, 0x8c, 0x53, 0x16, 0xb7, 0xa8, 0xf0, 0xfc, 0x96, 0x04, 0xa8, 0x9f, 0x68, 0xd0, 0x5a,
	0xb2, 0x77, 0x8d, 0x58, 0x10, 0x41, 0x33, 0x83, 0x72, 0xce, 0x78, 0x6a, 0x6c, 0x4d, 0xa9, 0x20,
	0x3e, 0x11, 0x24, 0xb5, 0x77, 0x46, 0x6c, 0xc4, 0xd4, 0xb2, 0x25, 0x57, 0x89, 0xd7, 0xfe, 0x31,
	0x07, 0x55, 0x4c, 0x86, 0xe2, 0x1e, 0x25, 0x5c, 0x0c, 0x28, 0x11, 0xe8, 0x36, 0x54, 0x46, 0x9c,
	0xcd, 0xa2, 0x7e, 0xe0, 0x5b, 0x5a, 0x5d, 0x6b, 0xe8, 0x9d, 0x1b, 0xf3, 0xf3, 0x5a, 0xf9, 0x2b,
	0xe9, 0xeb, 0x75, 0xff, 0x5d, 0x2e, 0x71, 0x59, 0xe1, 0x7a, 0x3e, 0xba, 0x0b, 0xdb, 0x43, 0xce,
	0xa6, 0x7d, 0x4e, 0xa3, 0x49, 0xe0, 0x11, 0xc9, 0xcc, 0xd5, 0xb5, 0x46, 0xb5, 0xb3, 0x37, 0x3f,
	0xaf, 0x55, 0xef, 0x72, 0x36, 0xc5, 0xc9, 0x8e, 0xe2, 0xeb, 0x0b, 0x03, 0x57, 0x87, 0x2b, 0x7b,
	0x3e, 0xba, 0x03, 0x55, 0xc1, 0x56, 0xa3, 0xe4, 0x55, 0x94, 0x9b, 0xf3, 0xf3, 0x9a, 0xf1, 0x88,
	0xbd, 0x20, 0x86, 0x21, 0xd8, 0x32, 0x02, 0x82, 0x82, 0xa0, 0x7c, 0x6a, 0x15, 0xea, 0x5a, 0xa3,
	0x80, 0xd5, 0x1a, 0xdd, 0x80, 0x92, 0xc7, 0xa6, 0xd3, 0x40, 0x58, 0x45, 0xe5, 0x4d, 0x2d, 0x64,
	0x41, 0xf9, 0x74, 0x16, 0xd0, 0xd8, 0xa3, 0x56, 0xa9, 0xae, 0x35, 0x2a, 0x38, 0x33, 0xed, 0xdf,
	0xf3, 0x80, 0xa4, 0x28, 0x0f, 0x69, 0x1c, 0x93, 0x11, 0xc5, 0xf4, 0x74, 0x46, 0xe3, 0x57, 0x52,
	0xa6, 0x07, 0x9b, 0xab, 0xca, 0x28, 0x59, 0x8c, 0x76, 0xbd, 0x79, 0xa1, 0xe6, 0xcd, 0x34, 0xff,
	0x2e, 0x8d, 0x3d, 0x1e, 0x44, 0x82, 0xf1, 0x4e, 0xe1, 0xec, 0xbc, 0xb6, 0x81, 0x8d, 0x15, 0x79,
	0x90, 0x0b, 0xb0, 0x14, 0x47, 0x29, 0xf3, 0xf2, 0x81, 0xf4, 0x85, 0x46, 0xa8, 0x05, 0xe5, 0x69,
	0xf2, 0x59, 0x4a, 0x24, 0xa3, 0xbd, 0xdd, 0x4c, 0xba, 0xaa, 0x99, 0x7e, 0x6d, 0x4a, 0xc9, 0x50,
	0xab, 0x32, 0x15, 0x2f, 0xc8, 0x84, 0x3a, 0x00, 0xe3, 0xac, 0x6d, 0x62, 0xab, 0x54, 0xcf, 0x37,
	0x8c, 0xf6, 0xcd, 0xf5, 0x8c, 0x56, 0x7b, 0x2b, 0x0d, 0xbd, 0xc2, 0x42, 0x0f, 0x60, 0x7b, 0x61,
	0xf5, 0x39, 0x8d, 0xa3, 0xd8, 0x2a, 0xbf, 0x74, 0xa0, 0xad, 0x05, 0x15, 0x4b, 0xa6, 0xfd, 0x3d,
	0xbc, 0x75, 0xb9, 0x6c, 0x1d, 0x22, 0xbc, 0x31, 0x72, 0xa0, 0xc2, 0x13, 0x3b, 0xb6, 0x34, 0x75,
	0xc0, 0x7b, 0x57, 0x1c, 0xb0, 0xc6, 0x4c, 0x4e, 0x59, 0x10, 0xed, 0x03, 0xb0, 0x2e, 0xa0, 0xe2,
	0x88, 0x85, 0x31, 0x7d, 0x1c, 0x06, 0x2c, 0x44, 0x1f, 0x42, 0x51, 0x4d, 0x9f, 0xea, 0x0c, 0xa3,
	0xbd, 0xb3, 0x16, 0xdd, 0x95, 0x7b, 0x38, 0x81, 0x7c, 0x5e, 0x38, 0xfb, 0xad, 0xa6, 0xd9, 0xbf,
	0xe6, 0xe0, 0xcd, 0x2b, 0xc2, 0xbd, 0x1e, 0x6d, 0xe6, 0x40, 0x71, 0x26, 0x75, 0x49, 0x9b, 0xec,
	0x83, 0xff, 0x13, 0x7b, 0x45, 0xc6, 0x34, 0x50, 0xc2, 0xb5, 0xff, 0xc9, 0xc3, 0xf6, 0x49, 0x48,
	0xa2, 0x78, 0xcc, 0x44, 0x36, 0x84, 0x5f, 0x40, 0x69, 0x4c, 0x89, 0x4f, 0x33, 0xa1, 0xdf, 0x5f,
	0x8b, 0xbc, 0x86, 0x6f, 0xde, 0x53, 0x60, 0x9c, 0x92, 0xd0, 0xdb, 0x50, 0x79, 0xf2, 0xb4, 0x3f,
	0x90, 0x3d, 0xa1, 0x54, 0xda, 0xc4, 0xe5, 0x27, 0x4f, 0x93, 0x16, 0xa9, 0x81, 0x31, 0x61, 0xa3,
	0x3e, 0x0d, 0x05, 0x0f, 0x68, 0x6c, 0xe5, 0xeb, 0xf9, 0xc6, 0x26, 0x86, 0x09, 0x1b, 0xb9, 0x89,
	0x07, 0xed, 0x40, 0x71, 0x18, 0x84, 0x64, 0xa2, 0xbe, 0xa9, 0x82, 0x13, 0x63, 0xf7, 0xe7, 0x1c,
	0x94, 0x92, 0x43, 0xd0, 0x09, 0xec, 0xc8, 0x3c, 0xfa, 0xe9, 0xe8, 0xf4, 0xd3, 0xc6, 0x49, 0xcb,
	0x71, 0x7d, 0xc3, 0x61, 0xc4, 0x2f, 0xdf, 0x3a, 0xef, 0xca, 0xd7, 0x22, 0x1c, 0xd1, 0x7e, 0x1c,
	0x3c, 0xa7, 0xaa, 0x20, 0x79, 0xac, 0x2b, 0xcf, 0x49, 0xf0, 0x9c, 0xca, 0xac, 0x3d, 0x12, 0xf6,
	0x7d, 0xea, 0x4d, 0x82, 0x90, 0xa6, 0xa9, 0x81, 0x47, 0xc2, 0x6e, 0xe2, 0x41, 0xb7, 0xa1, 0xa8,
	0xde, 0x08, 0x35, 0xbd, 0x46, 0xfb, 0x9d, 0xab, 0x6b, 0x79, 0x22, 0x21, 0x38, 0x41, 0xca, 0x61,
	0x89, 0x78, 0xc0, 0x78, 0x20, 0x9e, 0xa9, 0xab, 0x71, 0xeb, 0x52, 0xfd, 0xd6, 0x55, 0x3e, 0x4e,
	0xe1, 0x78, 0x41, 0xbc, 0x5f, 0xa8, 0x68, 0x66, 0xce, 0xfe, 0x0c, 0x2a, 0xd9, 0x1e, 0x32, 0xa0,
	0xfc, 0xf8, 0xf0, 0xc1, 0xe1, 0xd1, 0x37, 0x87, 0xe6, 0x06, 0xda, 0x84, 0x0a, 0x76, 0x9d, 0xa3,
	0xaf, 0x5d, 0xfc, 0xad, 0xa9, 0xa1, 0x2a, 0xe8, 0xd8, 0xed, 0xec, 0x1f, 0xec, 0x1f, 0x3a, 0xae,
	0x99, 0xb3, 0xff, 0xd0, 0xc0, 0x5c, 0x1e, 0x91, 0xce, 0xc5, 0x97, 0x50, 0x92, 0xe9, 0xcd, 0x62,
	0x55, 0xf9, 0xad, 0xf6, 0xad, 0x17, 0xe6, 0x94, 0x10, 0x9a, 0x27, 0x0a, 0x8d, 0x53, 0x96, 0xbc,
	0xc8, 0xb2, 0x9b, 0x4f, 0x16, 0x44, 0x5f, 0x5c, 0x71, 0x76, 0x0f, 0x4a, 0x09, 0xf6, 0x52, 0x8a,
	0xfb, 0x8e, 0xe3, 0x1e, 0x3f, 0x72, 0xbb, 0xa6, 0x26, 0xb7, 0xf6, 0x8f, 0x8f, 0x0f, 0x7a, 0x6e,
	0xd7, 0xcc, 0x21, 0x1d, 0x8a, 0x2e, 0xc6, 0x47, 0xd8, 0xcc, 0x4b, 0x54, 0xd7, 0x75, 0x0e, 0x7a,
	0x87, 0x6e, 0xd7, 0x2c, 0xdc, 0x2f, 0x54, 0xf2, 0x66, 0xc1, 0xfe, 0x45, 0x83, 0x37, 0x1c, 0x16,
	0x0e, 0x9d, 0xb1, 0xac, 0x93, 0xc3, 0x42, 0x41, 0x7f, 0x10, 0xe8, 0x23, 0x00, 0xf9, 0xf4, 0x90,
	0xd0, 0x5f, 0x8e, 0x76, 0x75, 0x7e, 0x5e, 0xd3, 0x9d, 0xc4, 0xdb, 0xeb, 0x62, 0x3d, 0x05, 0xf4,
	0x7c, 0x99, 0x6e, 0x44, 0x9e, 0x4d, 0x18, 0xf1, 0xb3, 0x46, 0x4d, 0x4d, 0x74, 0x07, 0xca, 0xaf,
	0x36, 0x9f, 0x19, 0xad, 0x7d, 0x0a, 0xfa, 0x43, 0xc9, 0x90, 0x2d, 0x88, 0x7c, 0x30, 0x57, 0x5a,
	0x31, 0x99, 0x85, 0x5b, 0xd7, 0x5f, 0x8e, 0x12, 0xb7, 0x6b, 0x5f, 0x3f, 0xd7, 0xf6, 0x46, 0x43,
	0xfb, 0x44, 0xeb, 0xd4, 0xce, 0xe6, 0x7b, 0xda, 0x9f, 0xf3, 0x3d, 0xed, 0xaf, 0xf9, 0x9e, 0xf6,
	0xd3, 0xdf, 0x7b, 0x1b, 0xdf, 0x5d, 0xfc, 0xe3, 0x33, 0x28, 0xa9, 0x3f, 0x24, 0x9f, 0xfe, 0x17,
	0x00, 0x00, 0xff, 0xff, 0xb6, 0xff, 0xea, 0x64, 0x1c, 0x09, 0x00, 0x00,
}
