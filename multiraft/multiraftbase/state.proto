/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Use gen.sh to generate .pb.go files.
syntax = "proto3";

package multiraftbase;
option go_package = "multiraftbase";

import "metadata.proto";
import "gogoproto/gogo.proto";

message RaftTruncatedState {
    option (gogoproto.equal) = true;
    option (gogoproto.populate) = true;

    // The highest index that has been removed from the log.
    uint64 index = 1;
    // The term corresponding to 'index'.
    uint64 term = 2;
}

message ReplicaState {
    option (gogoproto.equal) = true;
    uint64 raft_applied_index = 1;
    GroupDescriptor desc = 2;
    // The truncation state of the Raft log.
    RaftTruncatedState truncated_state = 3;
}

message PgInfo {
    option (gogoproto.equal) = true;

    ReplicaState state = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    // The highest (and last) index in the Raft log.
    uint64 lastIndex = 2;
    uint64 num_pending = 3;
    reserved 4; // previously last verification timestamp for verify queue.
    uint64 num_dropped = 5;
    // raft_log_size may be initially inaccurate after a server restart.
    // See storage.Replica.mu.raftLogSize.
    int64 raft_log_size = 6;
    // Approximately the amount of quota available.
    int64 approximate_proposal_quota = 7;
}