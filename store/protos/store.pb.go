// Code generated by protoc-gen-go. DO NOT EDIT.
// source: store.proto

/*
Package store is a generated protocol buffer package.

It is generated from these files:
	store.proto

It has these top-level messages:
	WriteRequest
	WriteReply
	ReadRequest
	ReadReply
	RemoveRequest
	RemoveReply
*/
package store

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WriteRequest struct {
	PGID   []byte `protobuf:"bytes,1,opt,name=PGID,proto3" json:"PGID,omitempty"`
	Oid    []byte `protobuf:"bytes,2,opt,name=Oid,proto3" json:"Oid,omitempty"`
	Value  []byte `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	Length uint64 `protobuf:"varint,4,opt,name=Length" json:"Length,omitempty"`
	Offset uint64 `protobuf:"varint,5,opt,name=Offset" json:"Offset,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WriteRequest) GetPGID() []byte {
	if m != nil {
		return m.PGID
	}
	return nil
}

func (m *WriteRequest) GetOid() []byte {
	if m != nil {
		return m.Oid
	}
	return nil
}

func (m *WriteRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *WriteRequest) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *WriteRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// The response message contains the return code of this write operation
type WriteReply struct {
	RetCode int32 `protobuf:"varint,1,opt,name=RetCode" json:"RetCode,omitempty"`
}

func (m *WriteReply) Reset()                    { *m = WriteReply{} }
func (m *WriteReply) String() string            { return proto.CompactTextString(m) }
func (*WriteReply) ProtoMessage()               {}
func (*WriteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WriteReply) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

type ReadRequest struct {
	PGID   []byte `protobuf:"bytes,1,opt,name=PGID,proto3" json:"PGID,omitempty"`
	Oid    []byte `protobuf:"bytes,2,opt,name=Oid,proto3" json:"Oid,omitempty"`
	Length uint64 `protobuf:"varint,3,opt,name=Length" json:"Length,omitempty"`
	Offset uint64 `protobuf:"varint,4,opt,name=Offset" json:"Offset,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadRequest) GetPGID() []byte {
	if m != nil {
		return m.PGID
	}
	return nil
}

func (m *ReadRequest) GetOid() []byte {
	if m != nil {
		return m.Oid
	}
	return nil
}

func (m *ReadRequest) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ReadRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ReadReply struct {
	ReadBuf []byte `protobuf:"bytes,1,opt,name=ReadBuf,proto3" json:"ReadBuf,omitempty"`
	RetCode int32  `protobuf:"varint,2,opt,name=RetCode" json:"RetCode,omitempty"`
}

func (m *ReadReply) Reset()                    { *m = ReadReply{} }
func (m *ReadReply) String() string            { return proto.CompactTextString(m) }
func (*ReadReply) ProtoMessage()               {}
func (*ReadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadReply) GetReadBuf() []byte {
	if m != nil {
		return m.ReadBuf
	}
	return nil
}

func (m *ReadReply) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

type RemoveRequest struct {
	PGID []byte `protobuf:"bytes,1,opt,name=PGID,proto3" json:"PGID,omitempty"`
	Oid  []byte `protobuf:"bytes,2,opt,name=Oid,proto3" json:"Oid,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RemoveRequest) GetPGID() []byte {
	if m != nil {
		return m.PGID
	}
	return nil
}

func (m *RemoveRequest) GetOid() []byte {
	if m != nil {
		return m.Oid
	}
	return nil
}

type RemoveReply struct {
	RetCode int32 `protobuf:"varint,1,opt,name=RetCode" json:"RetCode,omitempty"`
}

func (m *RemoveReply) Reset()                    { *m = RemoveReply{} }
func (m *RemoveReply) String() string            { return proto.CompactTextString(m) }
func (*RemoveReply) ProtoMessage()               {}
func (*RemoveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RemoveReply) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func init() {
	proto.RegisterType((*WriteRequest)(nil), "store.WriteRequest")
	proto.RegisterType((*WriteReply)(nil), "store.WriteReply")
	proto.RegisterType((*ReadRequest)(nil), "store.ReadRequest")
	proto.RegisterType((*ReadReply)(nil), "store.ReadReply")
	proto.RegisterType((*RemoveRequest)(nil), "store.RemoveRequest")
	proto.RegisterType((*RemoveReply)(nil), "store.RemoveReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Store service

type StoreClient interface {
	// Sends a write request to server
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := grpc.Invoke(ctx, "/store.Store/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := grpc.Invoke(ctx, "/store.Store/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := grpc.Invoke(ctx, "/store.Store/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreServer interface {
	// Sends a write request to server
	Write(context.Context, *WriteRequest) (*WriteReply, error)
	Read(context.Context, *ReadRequest) (*ReadReply, error)
	Remove(context.Context, *RemoveRequest) (*RemoveReply, error)
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "store.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Store_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Store_Read_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Store_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store.proto",
}

func init() { proto.RegisterFile("store.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0xed, 0x96, 0x54, 0xbc, 0x9b, 0x30, 0xaf, 0x43, 0x42, 0x9f, 0x46, 0x1e, 0x74, 0x4f,
	0x05, 0xff, 0x3d, 0x0b, 0x2a, 0x88, 0x20, 0x4c, 0x22, 0xe8, 0x73, 0xb5, 0xb7, 0x3a, 0xa8, 0xa6,
	0xb6, 0xa9, 0x30, 0x3f, 0x8d, 0x1f, 0x55, 0x92, 0x74, 0xb3, 0x15, 0x14, 0xf6, 0x96, 0x73, 0xd2,
	0x70, 0x7e, 0xf7, 0xdc, 0xc2, 0xa0, 0x32, 0xba, 0xa4, 0xb8, 0x28, 0xb5, 0xd1, 0xc8, 0x9d, 0x90,
	0x9f, 0x30, 0x7c, 0x28, 0xe7, 0x86, 0x14, 0xbd, 0xd7, 0x54, 0x19, 0x44, 0x60, 0xb7, 0x57, 0xd7,
	0x97, 0x22, 0x98, 0x04, 0xd3, 0xa1, 0x72, 0x67, 0x1c, 0x41, 0x7f, 0x36, 0x4f, 0x45, 0xcf, 0x59,
	0xf6, 0x88, 0x63, 0xe0, 0xf7, 0x49, 0x5e, 0x93, 0xe8, 0x3b, 0xcf, 0x0b, 0xdc, 0x83, 0xf0, 0x86,
	0xde, 0x9e, 0xcd, 0x8b, 0x60, 0x93, 0x60, 0xca, 0x54, 0xa3, 0xac, 0x3f, 0xcb, 0xb2, 0x8a, 0x8c,
	0xe0, 0xde, 0xf7, 0x4a, 0xee, 0x03, 0x34, 0xd9, 0x45, 0xbe, 0x40, 0x01, 0x9b, 0x8a, 0xcc, 0x85,
	0x4e, 0xc9, 0x85, 0x73, 0xb5, 0x94, 0xf2, 0x09, 0x06, 0x8a, 0x92, 0x74, 0x3d, 0xc4, 0x1f, 0x98,
	0xfe, 0x1f, 0x30, 0xac, 0x03, 0x73, 0x06, 0x5b, 0x3e, 0x64, 0xc5, 0x92, 0xa4, 0xe7, 0x75, 0xd6,
	0xa4, 0x2c, 0x65, 0x9b, 0xb2, 0xd7, 0xa5, 0x3c, 0x85, 0x6d, 0x45, 0xaf, 0xfa, 0x63, 0xbd, 0x2a,
	0xe5, 0x81, 0x1d, 0xce, 0x3f, 0xfb, 0xb7, 0x85, 0xa3, 0xaf, 0x00, 0xf8, 0x9d, 0xdd, 0x19, 0x1e,
	0x02, 0x77, 0xbd, 0xe1, 0x6e, 0xec, 0x37, 0xda, 0xde, 0x60, 0xb4, 0xd3, 0x35, 0x8b, 0x7c, 0x21,
	0x37, 0x30, 0x06, 0x66, 0x27, 0x40, 0x6c, 0x2e, 0x5b, 0x7d, 0x46, 0xa3, 0x8e, 0xe7, 0xbf, 0x3f,
	0x81, 0xd0, 0x53, 0xe1, 0x78, 0x75, 0xdb, 0x9a, 0x2d, 0xc2, 0x5f, 0xae, 0x7b, 0xf5, 0x18, 0xba,
	0x5f, 0xeb, 0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x6d, 0x27, 0x5e, 0x69, 0x02, 0x00, 0x00,
}
