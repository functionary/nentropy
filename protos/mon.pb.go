// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mon.proto

/*
	Package protos is a generated protocol buffer package.

	It is generated from these files:
		mon.proto
		osd.proto
		payload.proto

	It has these top-level messages:
		OsdStatusReportRequest
		OsdStatusReportReply
		LayoutRequest
		LayoutReply
		Osd
		OsdMap
		OsdConfigRequest
		OsdConfigReply
		PoolMap
		Pool
		PoolConfigRequest
		PoolConfigReply
		PgMaps
		PgMap
		PgReplica
		Pg
		Op
		Transaction
		PgConfigRequest
		PgConfigReply
		MonAddr
		MonMap
		UnionMap
		SyncMapRequest
		SyncMapReply
		CreatePgRequest
		CreatePgReply
		DeletePgRequest
		DeletePgReply
		Payload
		RaftContext
		Proposal
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DistributePolicy int32

const (
	DistributePolicy_OSD  DistributePolicy = 0
	DistributePolicy_HOST DistributePolicy = 1
	DistributePolicy_ZONE DistributePolicy = 2
)

var DistributePolicy_name = map[int32]string{
	0: "OSD",
	1: "HOST",
	2: "ZONE",
}
var DistributePolicy_value = map[string]int32{
	"OSD":  0,
	"HOST": 1,
	"ZONE": 2,
}

func (x DistributePolicy) String() string {
	return proto.EnumName(DistributePolicy_name, int32(x))
}
func (DistributePolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptorMon, []int{0} }

type OsdConfigRequest_OpType int32

const (
	OsdConfigRequest_ADD  OsdConfigRequest_OpType = 0
	OsdConfigRequest_DEL  OsdConfigRequest_OpType = 1
	OsdConfigRequest_IN   OsdConfigRequest_OpType = 2
	OsdConfigRequest_OUT  OsdConfigRequest_OpType = 3
	OsdConfigRequest_UP   OsdConfigRequest_OpType = 4
	OsdConfigRequest_DOWN OsdConfigRequest_OpType = 5
	OsdConfigRequest_LIST OsdConfigRequest_OpType = 6
)

var OsdConfigRequest_OpType_name = map[int32]string{
	0: "ADD",
	1: "DEL",
	2: "IN",
	3: "OUT",
	4: "UP",
	5: "DOWN",
	6: "LIST",
}
var OsdConfigRequest_OpType_value = map[string]int32{
	"ADD":  0,
	"DEL":  1,
	"IN":   2,
	"OUT":  3,
	"UP":   4,
	"DOWN": 5,
	"LIST": 6,
}

func (x OsdConfigRequest_OpType) String() string {
	return proto.EnumName(OsdConfigRequest_OpType_name, int32(x))
}
func (OsdConfigRequest_OpType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMon, []int{6, 0} }

type PoolConfigRequest_OpType int32

const (
	PoolConfigRequest_ADD  PoolConfigRequest_OpType = 0
	PoolConfigRequest_DEL  PoolConfigRequest_OpType = 1
	PoolConfigRequest_EDT  PoolConfigRequest_OpType = 2
	PoolConfigRequest_LIST PoolConfigRequest_OpType = 3
)

var PoolConfigRequest_OpType_name = map[int32]string{
	0: "ADD",
	1: "DEL",
	2: "EDT",
	3: "LIST",
}
var PoolConfigRequest_OpType_value = map[string]int32{
	"ADD":  0,
	"DEL":  1,
	"EDT":  2,
	"LIST": 3,
}

func (x PoolConfigRequest_OpType) String() string {
	return proto.EnumName(PoolConfigRequest_OpType_name, int32(x))
}
func (PoolConfigRequest_OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMon, []int{10, 0}
}

type Op_OpType int32

const (
	Op_OP_PUT     Op_OpType = 0
	Op_OP_ERASE   Op_OpType = 1
	Op_OP_COMPACT Op_OpType = 2
)

var Op_OpType_name = map[int32]string{
	0: "OP_PUT",
	1: "OP_ERASE",
	2: "OP_COMPACT",
}
var Op_OpType_value = map[string]int32{
	"OP_PUT":     0,
	"OP_ERASE":   1,
	"OP_COMPACT": 2,
}

func (x Op_OpType) String() string {
	return proto.EnumName(Op_OpType_name, int32(x))
}
func (Op_OpType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMon, []int{16, 0} }

type PgConfigRequest_OpType int32

const (
	PgConfigRequest_ADD  PgConfigRequest_OpType = 0
	PgConfigRequest_DEL  PgConfigRequest_OpType = 1
	PgConfigRequest_EDT  PgConfigRequest_OpType = 2
	PgConfigRequest_LIST PgConfigRequest_OpType = 3
)

var PgConfigRequest_OpType_name = map[int32]string{
	0: "ADD",
	1: "DEL",
	2: "EDT",
	3: "LIST",
}
var PgConfigRequest_OpType_value = map[string]int32{
	"ADD":  0,
	"DEL":  1,
	"EDT":  2,
	"LIST": 3,
}

func (x PgConfigRequest_OpType) String() string {
	return proto.EnumName(PgConfigRequest_OpType_name, int32(x))
}
func (PgConfigRequest_OpType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMon, []int{18, 0} }

type OsdStatusReportRequest struct {
	NodeId        int32    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	OwnPrimaryPgs []string `protobuf:"bytes,2,rep,name=own_primary_pgs,json=ownPrimaryPgs" json:"own_primary_pgs,omitempty"`
}

func (m *OsdStatusReportRequest) Reset()                    { *m = OsdStatusReportRequest{} }
func (m *OsdStatusReportRequest) String() string            { return proto.CompactTextString(m) }
func (*OsdStatusReportRequest) ProtoMessage()               {}
func (*OsdStatusReportRequest) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{0} }

func (m *OsdStatusReportRequest) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *OsdStatusReportRequest) GetOwnPrimaryPgs() []string {
	if m != nil {
		return m.OwnPrimaryPgs
	}
	return nil
}

type OsdStatusReportReply struct {
	RetCode int32 `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
}

func (m *OsdStatusReportReply) Reset()                    { *m = OsdStatusReportReply{} }
func (m *OsdStatusReportReply) String() string            { return proto.CompactTextString(m) }
func (*OsdStatusReportReply) ProtoMessage()               {}
func (*OsdStatusReportReply) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{1} }

func (m *OsdStatusReportReply) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

type LayoutRequest struct {
	ObjectName string `protobuf:"bytes,1,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	PoolName   string `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
}

func (m *LayoutRequest) Reset()                    { *m = LayoutRequest{} }
func (m *LayoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LayoutRequest) ProtoMessage()               {}
func (*LayoutRequest) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{2} }

func (m *LayoutRequest) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *LayoutRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

type LayoutReply struct {
	RetCode int32  `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	PgName  string `protobuf:"bytes,2,opt,name=pg_name,json=pgName,proto3" json:"pg_name,omitempty"`
	Osds    []*Osd `protobuf:"bytes,3,rep,name=osds" json:"osds,omitempty"`
}

func (m *LayoutReply) Reset()                    { *m = LayoutReply{} }
func (m *LayoutReply) String() string            { return proto.CompactTextString(m) }
func (*LayoutReply) ProtoMessage()               {}
func (*LayoutReply) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{3} }

func (m *LayoutReply) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *LayoutReply) GetPgName() string {
	if m != nil {
		return m.PgName
	}
	return ""
}

func (m *LayoutReply) GetOsds() []*Osd {
	if m != nil {
		return m.Osds
	}
	return nil
}

type Osd struct {
	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr   string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Weight uint64 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Host   string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Zone   string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	Up     bool   `protobuf:"varint,6,opt,name=up,proto3" json:"up,omitempty"`
	In     bool   `protobuf:"varint,7,opt,name=in,proto3" json:"in,omitempty"`
}

func (m *Osd) Reset()                    { *m = Osd{} }
func (m *Osd) String() string            { return proto.CompactTextString(m) }
func (*Osd) ProtoMessage()               {}
func (*Osd) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{4} }

func (m *Osd) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Osd) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Osd) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Osd) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Osd) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Osd) GetUp() bool {
	if m != nil {
		return m.Up
	}
	return false
}

func (m *Osd) GetIn() bool {
	if m != nil {
		return m.In
	}
	return false
}

type OsdMap struct {
	Epoch      uint64         `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	MemberList map[int32]*Osd `protobuf:"bytes,2,rep,name=memberList" json:"memberList,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *OsdMap) Reset()                    { *m = OsdMap{} }
func (m *OsdMap) String() string            { return proto.CompactTextString(m) }
func (*OsdMap) ProtoMessage()               {}
func (*OsdMap) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{5} }

func (m *OsdMap) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *OsdMap) GetMemberList() map[int32]*Osd {
	if m != nil {
		return m.MemberList
	}
	return nil
}

type OsdConfigRequest struct {
	KeyRing string                  `protobuf:"bytes,1,opt,name=keyRing,proto3" json:"keyRing,omitempty"`
	Osd     *Osd                    `protobuf:"bytes,2,opt,name=osd" json:"osd,omitempty"`
	OpType  OsdConfigRequest_OpType `protobuf:"varint,3,opt,name=op_type,json=opType,proto3,enum=protos.OsdConfigRequest_OpType" json:"op_type,omitempty"`
}

func (m *OsdConfigRequest) Reset()                    { *m = OsdConfigRequest{} }
func (m *OsdConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*OsdConfigRequest) ProtoMessage()               {}
func (*OsdConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{6} }

func (m *OsdConfigRequest) GetKeyRing() string {
	if m != nil {
		return m.KeyRing
	}
	return ""
}

func (m *OsdConfigRequest) GetOsd() *Osd {
	if m != nil {
		return m.Osd
	}
	return nil
}

func (m *OsdConfigRequest) GetOpType() OsdConfigRequest_OpType {
	if m != nil {
		return m.OpType
	}
	return OsdConfigRequest_ADD
}

type OsdConfigReply struct {
	RetCode int32   `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	Map     *OsdMap `protobuf:"bytes,2,opt,name=map" json:"map,omitempty"`
}

func (m *OsdConfigReply) Reset()                    { *m = OsdConfigReply{} }
func (m *OsdConfigReply) String() string            { return proto.CompactTextString(m) }
func (*OsdConfigReply) ProtoMessage()               {}
func (*OsdConfigReply) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{7} }

func (m *OsdConfigReply) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *OsdConfigReply) GetMap() *OsdMap {
	if m != nil {
		return m.Map
	}
	return nil
}

type PoolMap struct {
	Epoch uint64          `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pools map[int32]*Pool `protobuf:"bytes,2,rep,name=pools" json:"pools,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PoolMap) Reset()                    { *m = PoolMap{} }
func (m *PoolMap) String() string            { return proto.CompactTextString(m) }
func (*PoolMap) ProtoMessage()               {}
func (*PoolMap) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{8} }

func (m *PoolMap) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *PoolMap) GetPools() map[int32]*Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

type Pool struct {
	Id        int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size_     int32            `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	PgNumbers int32            `protobuf:"varint,4,opt,name=pg_numbers,json=pgNumbers,proto3" json:"pg_numbers,omitempty"`
	Policy    DistributePolicy `protobuf:"varint,5,opt,name=policy,proto3,enum=protos.DistributePolicy" json:"policy,omitempty"`
}

func (m *Pool) Reset()                    { *m = Pool{} }
func (m *Pool) String() string            { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()               {}
func (*Pool) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{9} }

func (m *Pool) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pool) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Pool) GetPgNumbers() int32 {
	if m != nil {
		return m.PgNumbers
	}
	return 0
}

func (m *Pool) GetPolicy() DistributePolicy {
	if m != nil {
		return m.Policy
	}
	return DistributePolicy_OSD
}

type PoolConfigRequest struct {
	KeyRing   string                   `protobuf:"bytes,1,opt,name=keyRing,proto3" json:"keyRing,omitempty"`
	OpType    PoolConfigRequest_OpType `protobuf:"varint,2,opt,name=op_type,json=opType,proto3,enum=protos.PoolConfigRequest_OpType" json:"op_type,omitempty"`
	Name      string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Size_     int32                    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	PgNumbers int32                    `protobuf:"varint,5,opt,name=pg_numbers,json=pgNumbers,proto3" json:"pg_numbers,omitempty"`
	Policy    DistributePolicy         `protobuf:"varint,6,opt,name=policy,proto3,enum=protos.DistributePolicy" json:"policy,omitempty"`
}

func (m *PoolConfigRequest) Reset()                    { *m = PoolConfigRequest{} }
func (m *PoolConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*PoolConfigRequest) ProtoMessage()               {}
func (*PoolConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{10} }

func (m *PoolConfigRequest) GetKeyRing() string {
	if m != nil {
		return m.KeyRing
	}
	return ""
}

func (m *PoolConfigRequest) GetOpType() PoolConfigRequest_OpType {
	if m != nil {
		return m.OpType
	}
	return PoolConfigRequest_ADD
}

func (m *PoolConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PoolConfigRequest) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *PoolConfigRequest) GetPgNumbers() int32 {
	if m != nil {
		return m.PgNumbers
	}
	return 0
}

func (m *PoolConfigRequest) GetPolicy() DistributePolicy {
	if m != nil {
		return m.Policy
	}
	return DistributePolicy_OSD
}

type PoolConfigReply struct {
	RetCode int32    `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	Map     *PoolMap `protobuf:"bytes,2,opt,name=map" json:"map,omitempty"`
}

func (m *PoolConfigReply) Reset()                    { *m = PoolConfigReply{} }
func (m *PoolConfigReply) String() string            { return proto.CompactTextString(m) }
func (*PoolConfigReply) ProtoMessage()               {}
func (*PoolConfigReply) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{11} }

func (m *PoolConfigReply) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *PoolConfigReply) GetMap() *PoolMap {
	if m != nil {
		return m.Map
	}
	return nil
}

type PgMaps struct {
	Epoch  uint64           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pgmaps map[int32]*PgMap `protobuf:"bytes,2,rep,name=pgmaps" json:"pgmaps,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PgMaps) Reset()                    { *m = PgMaps{} }
func (m *PgMaps) String() string            { return proto.CompactTextString(m) }
func (*PgMaps) ProtoMessage()               {}
func (*PgMaps) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{12} }

func (m *PgMaps) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *PgMaps) GetPgmaps() map[int32]*PgMap {
	if m != nil {
		return m.Pgmaps
	}
	return nil
}

type PgMap struct {
	PoolId int32         `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Pgmap  map[int32]*Pg `protobuf:"bytes,2,rep,name=pgmap" json:"pgmap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PgMap) Reset()                    { *m = PgMap{} }
func (m *PgMap) String() string            { return proto.CompactTextString(m) }
func (*PgMap) ProtoMessage()               {}
func (*PgMap) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{13} }

func (m *PgMap) GetPoolId() int32 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PgMap) GetPgmap() map[int32]*Pg {
	if m != nil {
		return m.Pgmap
	}
	return nil
}

type PgReplica struct {
	OsdId        int32 `protobuf:"varint,1,opt,name=osd_id,json=osdId,proto3" json:"osd_id,omitempty"`
	ReplicaIndex int32 `protobuf:"varint,2,opt,name=replica_index,json=replicaIndex,proto3" json:"replica_index,omitempty"`
}

func (m *PgReplica) Reset()                    { *m = PgReplica{} }
func (m *PgReplica) String() string            { return proto.CompactTextString(m) }
func (*PgReplica) ProtoMessage()               {}
func (*PgReplica) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{14} }

func (m *PgReplica) GetOsdId() int32 {
	if m != nil {
		return m.OsdId
	}
	return 0
}

func (m *PgReplica) GetReplicaIndex() int32 {
	if m != nil {
		return m.ReplicaIndex
	}
	return 0
}

type Pg struct {
	Id            int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PrimaryId     int32       `protobuf:"varint,2,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	Replicas      []PgReplica `protobuf:"bytes,3,rep,name=replicas" json:"replicas"`
	NextReplicaId int32       `protobuf:"varint,4,opt,name=next_replica_id,json=nextReplicaId,proto3" json:"next_replica_id,omitempty"`
}

func (m *Pg) Reset()                    { *m = Pg{} }
func (m *Pg) String() string            { return proto.CompactTextString(m) }
func (*Pg) ProtoMessage()               {}
func (*Pg) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{15} }

func (m *Pg) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pg) GetPrimaryId() int32 {
	if m != nil {
		return m.PrimaryId
	}
	return 0
}

func (m *Pg) GetReplicas() []PgReplica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *Pg) GetNextReplicaId() int32 {
	if m != nil {
		return m.NextReplicaId
	}
	return 0
}

type Op struct {
	Type   Op_OpType `protobuf:"varint,1,opt,name=type,proto3,enum=protos.Op_OpType" json:"type,omitempty"`
	Prefix string    `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Key    string    `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	EndKey string    `protobuf:"bytes,4,opt,name=endKey,proto3" json:"endKey,omitempty"`
	Data   []byte    `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Op) Reset()                    { *m = Op{} }
func (m *Op) String() string            { return proto.CompactTextString(m) }
func (*Op) ProtoMessage()               {}
func (*Op) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{16} }

func (m *Op) GetType() Op_OpType {
	if m != nil {
		return m.Type
	}
	return Op_OP_PUT
}

func (m *Op) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Op) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Op) GetEndKey() string {
	if m != nil {
		return m.EndKey
	}
	return ""
}

func (m *Op) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Transaction struct {
	Ops   []*Op  `protobuf:"bytes,1,rep,name=ops" json:"ops,omitempty"`
	Bytes uint64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Keys  uint64 `protobuf:"varint,3,opt,name=keys,proto3" json:"keys,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{17} }

func (m *Transaction) GetOps() []*Op {
	if m != nil {
		return m.Ops
	}
	return nil
}

func (m *Transaction) GetBytes() uint64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *Transaction) GetKeys() uint64 {
	if m != nil {
		return m.Keys
	}
	return 0
}

type PgConfigRequest struct {
	KeyRing string                 `protobuf:"bytes,1,opt,name=keyRing,proto3" json:"keyRing,omitempty"`
	OpType  PgConfigRequest_OpType `protobuf:"varint,2,opt,name=op_type,json=opType,proto3,enum=protos.PgConfigRequest_OpType" json:"op_type,omitempty"`
	Pool    string                 `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	Id      int32                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PgConfigRequest) Reset()                    { *m = PgConfigRequest{} }
func (m *PgConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*PgConfigRequest) ProtoMessage()               {}
func (*PgConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{18} }

func (m *PgConfigRequest) GetKeyRing() string {
	if m != nil {
		return m.KeyRing
	}
	return ""
}

func (m *PgConfigRequest) GetOpType() PgConfigRequest_OpType {
	if m != nil {
		return m.OpType
	}
	return PgConfigRequest_ADD
}

func (m *PgConfigRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *PgConfigRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PgConfigReply struct {
	RetCode int32  `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	Epoch   uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Map     *PgMap `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
}

func (m *PgConfigReply) Reset()                    { *m = PgConfigReply{} }
func (m *PgConfigReply) String() string            { return proto.CompactTextString(m) }
func (*PgConfigReply) ProtoMessage()               {}
func (*PgConfigReply) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{19} }

func (m *PgConfigReply) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *PgConfigReply) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *PgConfigReply) GetMap() *PgMap {
	if m != nil {
		return m.Map
	}
	return nil
}

type MonAddr struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *MonAddr) Reset()                    { *m = MonAddr{} }
func (m *MonAddr) String() string            { return proto.CompactTextString(m) }
func (*MonAddr) ProtoMessage()               {}
func (*MonAddr) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{20} }

func (m *MonAddr) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MonAddr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *MonAddr) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type MonMap struct {
	Epoch  uint64              `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	MonMap map[uint32]*MonAddr `protobuf:"bytes,2,rep,name=monMap" json:"monMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MonMap) Reset()                    { *m = MonMap{} }
func (m *MonMap) String() string            { return proto.CompactTextString(m) }
func (*MonMap) ProtoMessage()               {}
func (*MonMap) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{21} }

func (m *MonMap) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MonMap) GetMonMap() map[uint32]*MonAddr {
	if m != nil {
		return m.MonMap
	}
	return nil
}

func init() {
	proto.RegisterType((*OsdStatusReportRequest)(nil), "protos.OsdStatusReportRequest")
	proto.RegisterType((*OsdStatusReportReply)(nil), "protos.OsdStatusReportReply")
	proto.RegisterType((*LayoutRequest)(nil), "protos.LayoutRequest")
	proto.RegisterType((*LayoutReply)(nil), "protos.LayoutReply")
	proto.RegisterType((*Osd)(nil), "protos.Osd")
	proto.RegisterType((*OsdMap)(nil), "protos.OsdMap")
	proto.RegisterType((*OsdConfigRequest)(nil), "protos.OsdConfigRequest")
	proto.RegisterType((*OsdConfigReply)(nil), "protos.OsdConfigReply")
	proto.RegisterType((*PoolMap)(nil), "protos.PoolMap")
	proto.RegisterType((*Pool)(nil), "protos.Pool")
	proto.RegisterType((*PoolConfigRequest)(nil), "protos.PoolConfigRequest")
	proto.RegisterType((*PoolConfigReply)(nil), "protos.PoolConfigReply")
	proto.RegisterType((*PgMaps)(nil), "protos.PgMaps")
	proto.RegisterType((*PgMap)(nil), "protos.PgMap")
	proto.RegisterType((*PgReplica)(nil), "protos.PgReplica")
	proto.RegisterType((*Pg)(nil), "protos.Pg")
	proto.RegisterType((*Op)(nil), "protos.Op")
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*PgConfigRequest)(nil), "protos.PgConfigRequest")
	proto.RegisterType((*PgConfigReply)(nil), "protos.PgConfigReply")
	proto.RegisterType((*MonAddr)(nil), "protos.MonAddr")
	proto.RegisterType((*MonMap)(nil), "protos.MonMap")
	proto.RegisterEnum("protos.DistributePolicy", DistributePolicy_name, DistributePolicy_value)
	proto.RegisterEnum("protos.OsdConfigRequest_OpType", OsdConfigRequest_OpType_name, OsdConfigRequest_OpType_value)
	proto.RegisterEnum("protos.PoolConfigRequest_OpType", PoolConfigRequest_OpType_name, PoolConfigRequest_OpType_value)
	proto.RegisterEnum("protos.Op_OpType", Op_OpType_name, Op_OpType_value)
	proto.RegisterEnum("protos.PgConfigRequest_OpType", PgConfigRequest_OpType_name, PgConfigRequest_OpType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Monitor service

type MonitorClient interface {
	GetLayout(ctx context.Context, in *LayoutRequest, opts ...grpc.CallOption) (*LayoutReply, error)
	OsdConfig(ctx context.Context, in *OsdConfigRequest, opts ...grpc.CallOption) (*OsdConfigReply, error)
	PoolConfig(ctx context.Context, in *PoolConfigRequest, opts ...grpc.CallOption) (*PoolConfigReply, error)
	PgConfig(ctx context.Context, in *PgConfigRequest, opts ...grpc.CallOption) (*PgConfigReply, error)
	OsdStatusReport(ctx context.Context, in *OsdStatusReportRequest, opts ...grpc.CallOption) (*OsdStatusReportReply, error)
}

type monitorClient struct {
	cc *grpc.ClientConn
}

func NewMonitorClient(cc *grpc.ClientConn) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) GetLayout(ctx context.Context, in *LayoutRequest, opts ...grpc.CallOption) (*LayoutReply, error) {
	out := new(LayoutReply)
	err := grpc.Invoke(ctx, "/protos.Monitor/GetLayout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) OsdConfig(ctx context.Context, in *OsdConfigRequest, opts ...grpc.CallOption) (*OsdConfigReply, error) {
	out := new(OsdConfigReply)
	err := grpc.Invoke(ctx, "/protos.Monitor/OsdConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) PoolConfig(ctx context.Context, in *PoolConfigRequest, opts ...grpc.CallOption) (*PoolConfigReply, error) {
	out := new(PoolConfigReply)
	err := grpc.Invoke(ctx, "/protos.Monitor/PoolConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) PgConfig(ctx context.Context, in *PgConfigRequest, opts ...grpc.CallOption) (*PgConfigReply, error) {
	out := new(PgConfigReply)
	err := grpc.Invoke(ctx, "/protos.Monitor/PgConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) OsdStatusReport(ctx context.Context, in *OsdStatusReportRequest, opts ...grpc.CallOption) (*OsdStatusReportReply, error) {
	out := new(OsdStatusReportReply)
	err := grpc.Invoke(ctx, "/protos.Monitor/OsdStatusReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Monitor service

type MonitorServer interface {
	GetLayout(context.Context, *LayoutRequest) (*LayoutReply, error)
	OsdConfig(context.Context, *OsdConfigRequest) (*OsdConfigReply, error)
	PoolConfig(context.Context, *PoolConfigRequest) (*PoolConfigReply, error)
	PgConfig(context.Context, *PgConfigRequest) (*PgConfigReply, error)
	OsdStatusReport(context.Context, *OsdStatusReportRequest) (*OsdStatusReportReply, error)
}

func RegisterMonitorServer(s *grpc.Server, srv MonitorServer) {
	s.RegisterService(&_Monitor_serviceDesc, srv)
}

func _Monitor_GetLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Monitor/GetLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetLayout(ctx, req.(*LayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_OsdConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OsdConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).OsdConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Monitor/OsdConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).OsdConfig(ctx, req.(*OsdConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_PoolConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).PoolConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Monitor/PoolConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).PoolConfig(ctx, req.(*PoolConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_PgConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).PgConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Monitor/PgConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).PgConfig(ctx, req.(*PgConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_OsdStatusReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OsdStatusReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).OsdStatusReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Monitor/OsdStatusReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).OsdStatusReport(ctx, req.(*OsdStatusReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Monitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLayout",
			Handler:    _Monitor_GetLayout_Handler,
		},
		{
			MethodName: "OsdConfig",
			Handler:    _Monitor_OsdConfig_Handler,
		},
		{
			MethodName: "PoolConfig",
			Handler:    _Monitor_PoolConfig_Handler,
		},
		{
			MethodName: "PgConfig",
			Handler:    _Monitor_PgConfig_Handler,
		},
		{
			MethodName: "OsdStatusReport",
			Handler:    _Monitor_OsdStatusReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mon.proto",
}

func (m *OsdStatusReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsdStatusReportRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.NodeId))
	}
	if len(m.OwnPrimaryPgs) > 0 {
		for _, s := range m.OwnPrimaryPgs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *OsdStatusReportReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsdStatusReportReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.RetCode))
	}
	return i, nil
}

func (m *LayoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LayoutRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjectName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.ObjectName)))
		i += copy(dAtA[i:], m.ObjectName)
	}
	if len(m.PoolName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.PoolName)))
		i += copy(dAtA[i:], m.PoolName)
	}
	return i, nil
}

func (m *LayoutReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LayoutReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.RetCode))
	}
	if len(m.PgName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.PgName)))
		i += copy(dAtA[i:], m.PgName)
	}
	if len(m.Osds) > 0 {
		for _, msg := range m.Osds {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Osd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Osd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Id))
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Weight))
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Zone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Zone)))
		i += copy(dAtA[i:], m.Zone)
	}
	if m.Up {
		dAtA[i] = 0x30
		i++
		if m.Up {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.In {
		dAtA[i] = 0x38
		i++
		if m.In {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *OsdMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsdMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Epoch))
	}
	if len(m.MemberList) > 0 {
		for k, _ := range m.MemberList {
			dAtA[i] = 0x12
			i++
			v := m.MemberList[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMon(uint64(msgSize))
			}
			mapSize := 1 + sovMon(uint64(k)) + msgSize
			i = encodeVarintMon(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMon(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMon(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *OsdConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsdConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyRing) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.KeyRing)))
		i += copy(dAtA[i:], m.KeyRing)
	}
	if m.Osd != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Osd.Size()))
		n2, err := m.Osd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.OpType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.OpType))
	}
	return i, nil
}

func (m *OsdConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsdConfigReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.RetCode))
	}
	if m.Map != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Map.Size()))
		n3, err := m.Map.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *PoolMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Epoch))
	}
	if len(m.Pools) > 0 {
		for k, _ := range m.Pools {
			dAtA[i] = 0x12
			i++
			v := m.Pools[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMon(uint64(msgSize))
			}
			mapSize := 1 + sovMon(uint64(k)) + msgSize
			i = encodeVarintMon(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMon(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMon(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Size_))
	}
	if m.PgNumbers != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.PgNumbers))
	}
	if m.Policy != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Policy))
	}
	return i, nil
}

func (m *PoolConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyRing) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.KeyRing)))
		i += copy(dAtA[i:], m.KeyRing)
	}
	if m.OpType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.OpType))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Size_))
	}
	if m.PgNumbers != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.PgNumbers))
	}
	if m.Policy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Policy))
	}
	return i, nil
}

func (m *PoolConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolConfigReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.RetCode))
	}
	if m.Map != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Map.Size()))
		n5, err := m.Map.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PgMaps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PgMaps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Epoch))
	}
	if len(m.Pgmaps) > 0 {
		for k, _ := range m.Pgmaps {
			dAtA[i] = 0x12
			i++
			v := m.Pgmaps[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMon(uint64(msgSize))
			}
			mapSize := 1 + sovMon(uint64(k)) + msgSize
			i = encodeVarintMon(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMon(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMon(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *PgMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PgMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.PoolId))
	}
	if len(m.Pgmap) > 0 {
		for k, _ := range m.Pgmap {
			dAtA[i] = 0x12
			i++
			v := m.Pgmap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMon(uint64(msgSize))
			}
			mapSize := 1 + sovMon(uint64(k)) + msgSize
			i = encodeVarintMon(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMon(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMon(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	return i, nil
}

func (m *PgReplica) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PgReplica) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OsdId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.OsdId))
	}
	if m.ReplicaIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.ReplicaIndex))
	}
	return i, nil
}

func (m *Pg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Id))
	}
	if m.PrimaryId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.PrimaryId))
	}
	if len(m.Replicas) > 0 {
		for _, msg := range m.Replicas {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NextReplicaId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.NextReplicaId))
	}
	return i, nil
}

func (m *Op) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Op) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Type))
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, msg := range m.Ops {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Bytes))
	}
	if m.Keys != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Keys))
	}
	return i, nil
}

func (m *PgConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PgConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyRing) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.KeyRing)))
		i += copy(dAtA[i:], m.KeyRing)
	}
	if m.OpType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.OpType))
	}
	if len(m.Pool) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Pool)))
		i += copy(dAtA[i:], m.Pool)
	}
	if m.Id != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *PgConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PgConfigReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.RetCode))
	}
	if m.Epoch != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Epoch))
	}
	if m.Map != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Map.Size()))
		n8, err := m.Map.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *MonAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonAddr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Id))
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *MonMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Epoch))
	}
	if len(m.MonMap) > 0 {
		for k, _ := range m.MonMap {
			dAtA[i] = 0x12
			i++
			v := m.MonMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMon(uint64(msgSize))
			}
			mapSize := 1 + sovMon(uint64(k)) + msgSize
			i = encodeVarintMon(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMon(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMon(dAtA, i, uint64(v.Size()))
				n9, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n9
			}
		}
	}
	return i, nil
}

func encodeFixed64Mon(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mon(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OsdStatusReportRequest) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovMon(uint64(m.NodeId))
	}
	if len(m.OwnPrimaryPgs) > 0 {
		for _, s := range m.OwnPrimaryPgs {
			l = len(s)
			n += 1 + l + sovMon(uint64(l))
		}
	}
	return n
}

func (m *OsdStatusReportReply) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovMon(uint64(m.RetCode))
	}
	return n
}

func (m *LayoutRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	return n
}

func (m *LayoutReply) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovMon(uint64(m.RetCode))
	}
	l = len(m.PgName)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if len(m.Osds) > 0 {
		for _, e := range m.Osds {
			l = e.Size()
			n += 1 + l + sovMon(uint64(l))
		}
	}
	return n
}

func (m *Osd) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMon(uint64(m.Id))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovMon(uint64(m.Weight))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if m.Up {
		n += 2
	}
	if m.In {
		n += 2
	}
	return n
}

func (m *OsdMap) Size() (n int) {
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovMon(uint64(m.Epoch))
	}
	if len(m.MemberList) > 0 {
		for k, v := range m.MemberList {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMon(uint64(l))
			}
			mapEntrySize := 1 + sovMon(uint64(k)) + l
			n += mapEntrySize + 1 + sovMon(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OsdConfigRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyRing)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if m.Osd != nil {
		l = m.Osd.Size()
		n += 1 + l + sovMon(uint64(l))
	}
	if m.OpType != 0 {
		n += 1 + sovMon(uint64(m.OpType))
	}
	return n
}

func (m *OsdConfigReply) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovMon(uint64(m.RetCode))
	}
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovMon(uint64(l))
	}
	return n
}

func (m *PoolMap) Size() (n int) {
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovMon(uint64(m.Epoch))
	}
	if len(m.Pools) > 0 {
		for k, v := range m.Pools {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMon(uint64(l))
			}
			mapEntrySize := 1 + sovMon(uint64(k)) + l
			n += mapEntrySize + 1 + sovMon(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Pool) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMon(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovMon(uint64(m.Size_))
	}
	if m.PgNumbers != 0 {
		n += 1 + sovMon(uint64(m.PgNumbers))
	}
	if m.Policy != 0 {
		n += 1 + sovMon(uint64(m.Policy))
	}
	return n
}

func (m *PoolConfigRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyRing)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if m.OpType != 0 {
		n += 1 + sovMon(uint64(m.OpType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovMon(uint64(m.Size_))
	}
	if m.PgNumbers != 0 {
		n += 1 + sovMon(uint64(m.PgNumbers))
	}
	if m.Policy != 0 {
		n += 1 + sovMon(uint64(m.Policy))
	}
	return n
}

func (m *PoolConfigReply) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovMon(uint64(m.RetCode))
	}
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovMon(uint64(l))
	}
	return n
}

func (m *PgMaps) Size() (n int) {
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovMon(uint64(m.Epoch))
	}
	if len(m.Pgmaps) > 0 {
		for k, v := range m.Pgmaps {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMon(uint64(l))
			}
			mapEntrySize := 1 + sovMon(uint64(k)) + l
			n += mapEntrySize + 1 + sovMon(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PgMap) Size() (n int) {
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovMon(uint64(m.PoolId))
	}
	if len(m.Pgmap) > 0 {
		for k, v := range m.Pgmap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMon(uint64(l))
			}
			mapEntrySize := 1 + sovMon(uint64(k)) + l
			n += mapEntrySize + 1 + sovMon(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PgReplica) Size() (n int) {
	var l int
	_ = l
	if m.OsdId != 0 {
		n += 1 + sovMon(uint64(m.OsdId))
	}
	if m.ReplicaIndex != 0 {
		n += 1 + sovMon(uint64(m.ReplicaIndex))
	}
	return n
}

func (m *Pg) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMon(uint64(m.Id))
	}
	if m.PrimaryId != 0 {
		n += 1 + sovMon(uint64(m.PrimaryId))
	}
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.Size()
			n += 1 + l + sovMon(uint64(l))
		}
	}
	if m.NextReplicaId != 0 {
		n += 1 + sovMon(uint64(m.NextReplicaId))
	}
	return n
}

func (m *Op) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMon(uint64(m.Type))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	return n
}

func (m *Transaction) Size() (n int) {
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovMon(uint64(l))
		}
	}
	if m.Bytes != 0 {
		n += 1 + sovMon(uint64(m.Bytes))
	}
	if m.Keys != 0 {
		n += 1 + sovMon(uint64(m.Keys))
	}
	return n
}

func (m *PgConfigRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyRing)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if m.OpType != 0 {
		n += 1 + sovMon(uint64(m.OpType))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMon(uint64(m.Id))
	}
	return n
}

func (m *PgConfigReply) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovMon(uint64(m.RetCode))
	}
	if m.Epoch != 0 {
		n += 1 + sovMon(uint64(m.Epoch))
	}
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovMon(uint64(l))
	}
	return n
}

func (m *MonAddr) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMon(uint64(m.Id))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovMon(uint64(m.Port))
	}
	return n
}

func (m *MonMap) Size() (n int) {
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovMon(uint64(m.Epoch))
	}
	if len(m.MonMap) > 0 {
		for k, v := range m.MonMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMon(uint64(l))
			}
			mapEntrySize := 1 + sovMon(uint64(k)) + l
			n += mapEntrySize + 1 + sovMon(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMon(x uint64) (n int) {
	return sovMon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OsdStatusReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsdStatusReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsdStatusReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnPrimaryPgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnPrimaryPgs = append(m.OwnPrimaryPgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OsdStatusReportReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsdStatusReportReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsdStatusReportReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LayoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LayoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LayoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LayoutReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LayoutReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LayoutReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Osds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Osds = append(m.Osds, &Osd{})
			if err := m.Osds[len(m.Osds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Osd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Osd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Osd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Up = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.In = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OsdMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsdMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsdMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberList == nil {
				m.MemberList = make(map[int32]*Osd)
			}
			var mapkey int32
			var mapvalue *Osd
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Osd{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MemberList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OsdConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsdConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsdConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyRing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Osd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Osd == nil {
				m.Osd = &Osd{}
			}
			if err := m.Osd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= (OsdConfigRequest_OpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OsdConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsdConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsdConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &OsdMap{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pools == nil {
				m.Pools = make(map[int32]*Pool)
			}
			var mapkey int32
			var mapvalue *Pool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Pool{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Pools[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgNumbers", wireType)
			}
			m.PgNumbers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PgNumbers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			m.Policy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Policy |= (DistributePolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyRing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= (PoolConfigRequest_OpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgNumbers", wireType)
			}
			m.PgNumbers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PgNumbers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			m.Policy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Policy |= (DistributePolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &PoolMap{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PgMaps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PgMaps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PgMaps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pgmaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pgmaps == nil {
				m.Pgmaps = make(map[int32]*PgMap)
			}
			var mapkey int32
			var mapvalue *PgMap
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PgMap{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Pgmaps[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PgMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PgMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PgMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pgmap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pgmap == nil {
				m.Pgmap = make(map[int32]*Pg)
			}
			var mapkey int32
			var mapvalue *Pg
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Pg{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Pgmap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PgReplica) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PgReplica: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PgReplica: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsdId", wireType)
			}
			m.OsdId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsdId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaIndex", wireType)
			}
			m.ReplicaIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryId", wireType)
			}
			m.PrimaryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, PgReplica{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextReplicaId", wireType)
			}
			m.NextReplicaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextReplicaId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Op) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Op: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Op: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Op_OpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, &Op{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			m.Keys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keys |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PgConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PgConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PgConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyRing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= (PgConfigRequest_OpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PgConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PgConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PgConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &PgMap{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MonMap == nil {
				m.MonMap = make(map[uint32]*MonAddr)
			}
			var mapkey uint32
			var mapvalue *MonAddr
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMon
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MonAddr{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MonMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMon   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mon.proto", fileDescriptorMon) }

var fileDescriptorMon = []byte{
	// 1360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x37, 0xff, 0x88, 0x92, 0x46, 0x96, 0xc5, 0xec, 0x97, 0x38, 0x8a, 0xbe, 0xc4, 0x56, 0x18,
	0xe4, 0x83, 0xf1, 0x01, 0x75, 0x52, 0xe5, 0xd0, 0xa4, 0x28, 0x5a, 0x38, 0x96, 0x9b, 0x28, 0xb5,
	0x4c, 0x96, 0x96, 0x51, 0xb4, 0x17, 0x81, 0xf6, 0x6e, 0x18, 0x36, 0x16, 0x77, 0xcb, 0xa5, 0x9a,
	0x28, 0x6f, 0xd0, 0x53, 0x73, 0x2a, 0x5a, 0xa0, 0xe8, 0x03, 0xf4, 0x5e, 0xf4, 0x15, 0x72, 0x2a,
	0x7a, 0xee, 0xa1, 0x28, 0xd2, 0x17, 0x29, 0x76, 0x97, 0x92, 0x28, 0x59, 0x8a, 0xd3, 0x13, 0x67,
	0x7f, 0xb3, 0x3b, 0x3b, 0xb3, 0xf3, 0x9b, 0xd9, 0x25, 0x94, 0x07, 0x34, 0xde, 0x66, 0x09, 0x4d,
	0x29, 0xb2, 0xe4, 0x87, 0x37, 0x2e, 0x86, 0x34, 0xa4, 0x52, 0xbe, 0x25, 0x24, 0xa5, 0x75, 0x3e,
	0x87, 0x75, 0x97, 0xe3, 0xc3, 0x34, 0x48, 0x87, 0xdc, 0x27, 0x8c, 0x26, 0xa9, 0x4f, 0xbe, 0x1a,
	0x12, 0x9e, 0xa2, 0xcb, 0x50, 0x8c, 0x29, 0x26, 0xfd, 0x08, 0xd7, 0xb5, 0xa6, 0xb6, 0x55, 0xf0,
	0x2d, 0x31, 0xec, 0x60, 0xf4, 0x3f, 0xa8, 0xd1, 0x67, 0x71, 0x9f, 0x25, 0xd1, 0x20, 0x48, 0x46,
	0x7d, 0x16, 0xf2, 0xba, 0xde, 0x34, 0xb6, 0xca, 0x7e, 0x95, 0x3e, 0x8b, 0x3d, 0x85, 0x7a, 0x21,
	0x77, 0xde, 0x85, 0x8b, 0x67, 0x4c, 0xb3, 0xd3, 0x11, 0xba, 0x02, 0xa5, 0x84, 0xa4, 0xfd, 0x13,
	0x8a, 0x49, 0x66, 0xb9, 0x98, 0x90, 0x74, 0x97, 0x62, 0xe2, 0x74, 0xa1, 0xba, 0x1f, 0x8c, 0xe8,
	0x70, 0xe2, 0xc4, 0x26, 0x54, 0xe8, 0xf1, 0x97, 0xe4, 0x24, 0xed, 0xc7, 0xc1, 0x40, 0x4d, 0x2f,
	0xfb, 0xa0, 0xa0, 0x83, 0x60, 0x40, 0xd0, 0x7f, 0xa1, 0xcc, 0x28, 0x3d, 0x55, 0x6a, 0x5d, 0xaa,
	0x4b, 0x02, 0x10, 0x4a, 0xe7, 0x18, 0x2a, 0x63, 0x73, 0x6f, 0xde, 0x58, 0x04, 0xcb, 0xc2, 0xbc,
	0x11, 0x8b, 0x85, 0xd2, 0xfe, 0x26, 0x98, 0x94, 0x63, 0x5e, 0x37, 0x9a, 0xc6, 0x56, 0xa5, 0x55,
	0x51, 0xa7, 0xc6, 0xb7, 0x5d, 0x8e, 0x7d, 0xa9, 0x70, 0xbe, 0xd1, 0xc0, 0x70, 0x39, 0x46, 0x6b,
	0xa0, 0x4f, 0x4e, 0x4a, 0x8f, 0x30, 0x42, 0x60, 0x06, 0x18, 0x27, 0x99, 0x39, 0x29, 0xa3, 0x75,
	0xb0, 0x9e, 0x91, 0x28, 0x7c, 0x92, 0xd6, 0x8d, 0xa6, 0xb6, 0x65, 0xfa, 0xd9, 0x48, 0xcc, 0x7d,
	0x42, 0x79, 0x5a, 0x37, 0xd5, 0x5c, 0x21, 0x0b, 0xec, 0x05, 0x8d, 0x49, 0xbd, 0xa0, 0x30, 0x21,
	0x8b, 0x3d, 0x86, 0xac, 0x6e, 0x35, 0xb5, 0xad, 0x92, 0xaf, 0x0f, 0x99, 0xdc, 0x33, 0xae, 0x17,
	0xd5, 0x38, 0x8a, 0x9d, 0x9f, 0x35, 0xb0, 0x5c, 0x8e, 0xbb, 0x01, 0x43, 0x17, 0xa1, 0x40, 0x18,
	0x3d, 0x79, 0x22, 0x3d, 0x32, 0x7d, 0x35, 0x40, 0x1f, 0x02, 0x0c, 0xc8, 0xe0, 0x98, 0x24, 0xfb,
	0x11, 0x4f, 0x65, 0xd6, 0x2a, 0xad, 0x8d, 0x5c, 0x4c, 0xdd, 0x80, 0x6d, 0x77, 0x27, 0x13, 0xf6,
	0xe2, 0x34, 0x19, 0xf9, 0xb9, 0x15, 0x8d, 0x47, 0x50, 0x9b, 0x53, 0x23, 0x1b, 0x8c, 0xa7, 0x64,
	0x94, 0x05, 0x2e, 0x44, 0x74, 0x1d, 0x0a, 0x5f, 0x07, 0xa7, 0x43, 0x75, 0x92, 0x73, 0x67, 0xa6,
	0x34, 0xef, 0xeb, 0x77, 0x35, 0xe7, 0x37, 0x0d, 0x6c, 0x97, 0xe3, 0x5d, 0x1a, 0x3f, 0x8e, 0xc2,
	0x71, 0xbe, 0xeb, 0x50, 0x7c, 0x4a, 0x46, 0x7e, 0x14, 0x87, 0x59, 0xae, 0xc7, 0x43, 0x74, 0x0d,
	0x0c, 0xca, 0xf1, 0x22, 0x9b, 0x02, 0x47, 0x77, 0xa1, 0x48, 0x59, 0x3f, 0x1d, 0x31, 0x22, 0xcf,
	0x76, 0xad, 0xb5, 0x99, 0x9b, 0x32, 0xb3, 0xc7, 0xb6, 0xcb, 0x7a, 0x23, 0x46, 0x7c, 0x8b, 0xca,
	0xaf, 0xf3, 0x00, 0x2c, 0x85, 0xa0, 0x22, 0x18, 0x3b, 0xed, 0xb6, 0xbd, 0x22, 0x84, 0xf6, 0xde,
	0xbe, 0xad, 0x21, 0x0b, 0xf4, 0xce, 0x81, 0xad, 0x0b, 0xc0, 0x3d, 0xea, 0xd9, 0x86, 0x00, 0x8e,
	0x3c, 0xdb, 0x44, 0x25, 0x30, 0xdb, 0xee, 0x67, 0x07, 0x76, 0x41, 0x48, 0xfb, 0x9d, 0xc3, 0x9e,
	0x6d, 0x39, 0x5d, 0x58, 0xcb, 0xed, 0x75, 0x0e, 0xe1, 0x9a, 0x60, 0x0c, 0x02, 0x96, 0x85, 0xb3,
	0x36, 0x9b, 0x02, 0x5f, 0xa8, 0x9c, 0x1f, 0x34, 0x28, 0x7a, 0x94, 0x9e, 0x2e, 0xcf, 0xe6, 0x6d,
	0x28, 0x08, 0xaa, 0xf3, 0x2c, 0x91, 0x8d, 0xb1, 0x95, 0x6c, 0x95, 0xfc, 0x72, 0x95, 0x44, 0x35,
	0xb1, 0xf1, 0x31, 0xc0, 0x14, 0x5c, 0x90, 0x3a, 0x67, 0x36, 0x75, 0xab, 0x79, 0x8b, 0xf9, 0xdc,
	0x7d, 0xab, 0x81, 0x29, 0xb0, 0x45, 0xac, 0xcf, 0x15, 0x91, 0x94, 0x05, 0xc6, 0xa3, 0x17, 0x2a,
	0x2f, 0x05, 0x5f, 0xca, 0xe8, 0x1a, 0x80, 0xa8, 0xb7, 0xa1, 0xe0, 0x12, 0x97, 0xbc, 0x2f, 0xf8,
	0x65, 0x16, 0x1e, 0x28, 0x00, 0xdd, 0x06, 0x8b, 0xd1, 0xd3, 0xe8, 0x64, 0x24, 0xe9, 0xbf, 0xd6,
	0xaa, 0x8f, 0x1d, 0x69, 0x47, 0x3c, 0x4d, 0xa2, 0xe3, 0x61, 0x4a, 0x3c, 0xa9, 0xf7, 0xb3, 0x79,
	0xce, 0x4b, 0x1d, 0x2e, 0x08, 0x8f, 0xde, 0x96, 0x4e, 0xf7, 0xa6, 0x7c, 0xd1, 0xe5, 0x16, 0xcd,
	0x7c, 0xac, 0x6f, 0x22, 0xcc, 0x24, 0x46, 0x63, 0x41, 0x8c, 0xe6, 0xd2, 0x18, 0x0b, 0xcb, 0x63,
	0xb4, 0xde, 0x32, 0xc6, 0x77, 0xde, 0xc0, 0xd4, 0x22, 0x18, 0x7b, 0xed, 0x9e, 0xad, 0x4f, 0xf8,
	0x68, 0x38, 0x2e, 0xd4, 0xf2, 0xb1, 0x9c, 0x43, 0xc8, 0xeb, 0x79, 0x42, 0xd6, 0xe6, 0xa8, 0xa4,
	0x18, 0xf9, 0xa3, 0x06, 0x96, 0x17, 0x76, 0x03, 0xc6, 0x97, 0x10, 0xb2, 0x05, 0x16, 0x0b, 0x07,
	0x01, 0x3b, 0xcb, 0x48, 0xb9, 0x6a, 0xdb, 0x93, 0x4a, 0xc5, 0xc8, 0x6c, 0x66, 0xe3, 0x21, 0x54,
	0x72, 0xf0, 0x02, 0x4e, 0xde, 0x98, 0xe5, 0x64, 0x75, 0xc6, 0x66, 0x9e, 0x94, 0xdf, 0x69, 0x50,
	0x90, 0xa0, 0xec, 0xe6, 0xe2, 0x52, 0x98, 0x5e, 0x5d, 0x62, 0xd8, 0xc1, 0x68, 0x1b, 0x0a, 0x72,
	0xdb, 0xcc, 0xbf, 0xfa, 0x8c, 0x2d, 0xe5, 0xde, 0xb8, 0x5e, 0x84, 0xdc, 0x68, 0x03, 0x4c, 0xc1,
	0x05, 0xbe, 0x35, 0x67, 0x7d, 0x83, 0xa9, 0xbd, 0xbc, 0x63, 0x0f, 0xa0, 0xec, 0xc9, 0x04, 0x44,
	0x27, 0x01, 0xba, 0x04, 0x16, 0xe5, 0x78, 0xea, 0x5a, 0x81, 0x72, 0xdc, 0xc1, 0xe8, 0x06, 0x54,
	0x13, 0x35, 0xa3, 0x1f, 0xc5, 0x98, 0x3c, 0x97, 0x16, 0x0b, 0xfe, 0x6a, 0x06, 0x76, 0x04, 0xe6,
	0xbc, 0xd4, 0x40, 0xf7, 0xc2, 0x33, 0x45, 0x27, 0x88, 0x96, 0x5d, 0xc6, 0x11, 0xce, 0x16, 0x96,
	0x33, 0xa4, 0x83, 0xd1, 0x1d, 0x91, 0x74, 0x69, 0x65, 0x7c, 0x8d, 0x5d, 0xc8, 0xf9, 0xa9, 0x34,
	0xf7, 0xcd, 0x57, 0x7f, 0x6e, 0xae, 0xf8, 0x93, 0x89, 0xe2, 0x92, 0x8f, 0xc9, 0xf3, 0xb4, 0x3f,
	0x71, 0x0a, 0x67, 0xdc, 0xae, 0x0a, 0x38, 0x5b, 0xd5, 0xc1, 0xce, 0x2f, 0x1a, 0xe8, 0x2e, 0x43,
	0x37, 0xc1, 0x94, 0xb5, 0xa4, 0x49, 0x2a, 0x4f, 0xec, 0xbb, 0x6c, 0x5c, 0x3c, 0x52, 0x2d, 0x2e,
	0x40, 0x96, 0x90, 0xc7, 0xd1, 0xf3, 0xc9, 0x2d, 0x2b, 0x47, 0xe3, 0x93, 0x55, 0x15, 0x25, 0x4f,
	0x76, 0x1d, 0x2c, 0x12, 0xe3, 0x4f, 0xc8, 0x28, 0xbb, 0x14, 0xb3, 0x91, 0x28, 0x34, 0x1c, 0xa4,
	0x81, 0x2c, 0xa7, 0x55, 0x5f, 0xca, 0x4e, 0x6b, 0x52, 0x17, 0x00, 0x96, 0xeb, 0xf5, 0xbd, 0xa3,
	0x9e, 0xbd, 0x82, 0x56, 0xa1, 0xe4, 0x7a, 0xfd, 0x3d, 0x7f, 0xe7, 0x70, 0xcf, 0xd6, 0xd0, 0x1a,
	0x80, 0xeb, 0xf5, 0x77, 0xdd, 0xae, 0xb7, 0xb3, 0xdb, 0xb3, 0x75, 0xe7, 0x08, 0x2a, 0xbd, 0x24,
	0x88, 0x79, 0x70, 0x92, 0x46, 0x34, 0x46, 0x57, 0xc1, 0xa0, 0x8c, 0xd7, 0x35, 0x79, 0x3c, 0x30,
	0x75, 0xdf, 0x17, 0xb0, 0x60, 0xfb, 0xf1, 0x28, 0x25, 0x5c, 0x7a, 0x6d, 0xfa, 0x6a, 0x20, 0x5c,
	0x79, 0x4a, 0x46, 0x3c, 0xbb, 0xcb, 0xa5, 0xec, 0xfc, 0xaa, 0x41, 0xcd, 0x0b, 0xdf, 0xb6, 0x09,
	0xbd, 0x37, 0xdf, 0x84, 0x36, 0xa6, 0x89, 0x39, 0xaf, 0x05, 0x09, 0x46, 0x8f, 0x5b, 0x10, 0x9b,
	0xb6, 0x62, 0x73, 0xcc, 0x8a, 0x7f, 0xdb, 0x2d, 0x02, 0xa8, 0x4e, 0x37, 0x3d, 0xa7, 0x57, 0x4c,
	0xaa, 0x5f, 0xcf, 0x57, 0xff, 0xa6, 0xea, 0x20, 0xc6, 0xa2, 0x32, 0x95, 0xfd, 0x63, 0x07, 0x8a,
	0x5d, 0x1a, 0xef, 0x88, 0x97, 0xd0, 0x94, 0xc2, 0xd5, 0xa5, 0xaf, 0x25, 0x19, 0x64, 0xa2, 0xde,
	0x4a, 0x55, 0x5f, 0xca, 0xce, 0x4f, 0x1a, 0x58, 0x5d, 0x1a, 0x2f, 0xbf, 0x13, 0x5b, 0x60, 0x0d,
	0xa4, 0x7e, 0xbe, 0x05, 0xa9, 0x55, 0xd9, 0x27, 0x6b, 0x41, 0x6a, 0x66, 0xe3, 0x11, 0x54, 0x72,
	0x70, 0xbe, 0xcc, 0xab, 0x8a, 0x8c, 0x37, 0x67, 0xcb, 0xbc, 0x96, 0xb3, 0x29, 0xa2, 0xc9, 0xd5,
	0xfa, 0xff, 0x6f, 0x81, 0x3d, 0xdf, 0xbf, 0xe5, 0xeb, 0xe1, 0x50, 0x9c, 0x7f, 0x09, 0xcc, 0x87,
	0xee, 0x61, 0xcf, 0xd6, 0x84, 0xf4, 0x85, 0x7b, 0xb0, 0x67, 0xeb, 0xad, 0x3f, 0x74, 0x79, 0x2a,
	0x51, 0x4a, 0x13, 0x74, 0x0f, 0xca, 0x0f, 0x48, 0xaa, 0x9e, 0xac, 0xe8, 0xd2, 0x78, 0x97, 0x99,
	0x17, 0x71, 0xe3, 0x3f, 0xf3, 0x30, 0x3b, 0x1d, 0x39, 0x2b, 0xe8, 0x23, 0x28, 0x4f, 0x1e, 0x1f,
	0xa8, 0xbe, 0xec, 0xed, 0xd3, 0x58, 0x5f, 0xa0, 0x51, 0x06, 0xee, 0xab, 0xa7, 0x41, 0x66, 0xe1,
	0xca, 0xd2, 0xdb, 0xb0, 0x71, 0x79, 0x91, 0x4a, 0xd9, 0xf8, 0x00, 0x4a, 0x63, 0x0e, 0xa1, 0xcb,
	0x4b, 0xa8, 0xdc, 0xb8, 0x74, 0x56, 0xa1, 0x56, 0x7f, 0x0a, 0xb5, 0xb9, 0xff, 0x05, 0x94, 0x7f,
	0x9b, 0x2e, 0xf8, 0x47, 0x69, 0x5c, 0x5d, 0xaa, 0x97, 0x26, 0xef, 0xdb, 0xaf, 0x5e, 0x6f, 0x68,
	0xbf, 0xbf, 0xde, 0xd0, 0xfe, 0x7a, 0xbd, 0xa1, 0x7d, 0xff, 0xf7, 0xc6, 0xca, 0xb1, 0xfa, 0x1b,
	0xba, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xa6, 0xd8, 0x17, 0x21, 0x0d, 0x00, 0x00,
}
