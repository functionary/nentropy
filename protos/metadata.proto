syntax = "proto3";
package protos;

// Attributes specifies a list of arbitrary strings describing
// node topology, store type, and machine capabilities.
message Attributes {
    repeated string attrs = 1;
}


// ReplicationTarget identifies a node/store pair.
message ReplicationTarget {
    string node_id = 1;
    int32 store_id = 2;
}

message ReplicaDescriptor {
    //in nentropy node_id here should be osd.id
    string node_id = 1;
    int32 store_id = 2;
    // replica_id uniquely identifies a replica instance. If a range is removed from
    // a store and then re-added to the same store, the new instance will have a
    // higher replica_id.
    int32 replica_id = 3;
}

message ReplicaIdent {
    int64 pool_id = 1;
    int64 pg_id = 2;
    ReplicaDescriptor replica = 3;
}

// StoreCapacity contains capacity information for a storage device.
message StoreCapacity {

    // Total capacity of the disk used by the store, including space used by the
    // operating system and other applications.
    int64 capacity = 1;
    // Available space remaining on the disk used by the store.
    int64 available = 2;
    // Amount of disk space used by the data in the CockroachDB store. Note that
    // this is going to be less than (capacity - available), because those two
    // fields consider the entire disk and everything on it, while this only
    // tracks the store's disk usage.
    int64 used = 8;
    // Amount of logical bytes stored in the store, ignoring RocksDB space
    // overhead. Useful for rebalancing so that moving a replica from one store
    // to another actually removes its bytes from the source store even though
    // RocksDB may not actually reclaim the physical disk space for a while.
    int64 logical_bytes = 9;
    int32 pg_count = 3;
}

// NodeDescriptor holds details on node physical/network topology.
message NodeDescriptor {
    string node_id = 1;
    Attributes attrs = 2;
}

// StoreDescriptor holds store information including store attributes, node
// descriptor and store capacity.
message StoreDescriptor {
    int32 store_id = 1;
    Attributes attrs = 2 ;
    NodeDescriptor node = 3;
    StoreCapacity capacity = 4;
}

// StoreDeadReplicas holds a storeID and a list of dead replicas on that store.
// Used to let the range lease holder know about corrupted or otherwise
// destroyed replicas that should be transferred to a different store.
message StoreDeadReplicas {
    int32 store_id = 1;
    repeated ReplicaIdent replicas = 2;
}