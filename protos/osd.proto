/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Use protos/gen.sh to generate .pb.go files.
syntax = "proto3";
import "github.com/journeymidnight/nentropy/multiraft/multiraftbase/metadata.proto";
import "mon.proto";
import "gogoproto/gogo.proto";
package protos;

service OsdRpc {
    rpc CreatePg (CreatePgRequest) returns (CreatePgReply) {}
    rpc DeletePg (DeletePgRequest) returns (DeletePgReply) {}
    rpc SyncMap (SyncMapRequest) returns (SyncMapReply) {}
    rpc MigrateGet (MigrateGetRequest) returns (MigrateGetReply) {}
}

enum SyncMapType {
    option (gogoproto.goproto_enum_prefix) = false;
    // CONSISTENT reads are guaranteed to read committed data; the
    // mechanism relies on clocks to determine lease expirations.
    PGMAP = 0;
    // CONSENSUS requires that reads must achieve consensus. This is a
    // stronger guarantee of consistency than CONSISTENT.
    //
    // TODO(spencer): current unimplemented.
    OSDMAP = 1;
    // INCONSISTENT reads return the latest available, committed values.
    // They are more efficient, but may read stale values as pending
    // intents are ignored.
    POOLMAP = 2;
}

message UnionMap {
    option (gogoproto.onlyone) = true;
    PgMaps pgmap = 1;
    PoolMap poolmap = 2;
    OsdMap osdmap = 3;
}

message SyncMapRequest {
    SyncMapType map_type = 1 ;
    UnionMap union_map = 2 [(gogoproto.nullable) = false];
}

message SyncMapReply {
    int32 ret_code = 1;
}

message MigrateGetRequest {
    string parent_pg_id = 1;
    string child_pg_id = 2;
    bytes marker = 3;
}

message MigrateGetReply {
    bytes key = 1;
    bytes value = 2;
    bytes marker = 3;
}

message CreatePgRequest {
    string pg_name = 1;
    multiraftbase.GroupDescriptor group_descriptor = 2;
}

message CreatePgReply {
    int32 ret_code = 1;
}

message DeletePgRequest {
    string pg_name = 1;
}

message DeletePgReply {
    int32 ret_code = 1;
}